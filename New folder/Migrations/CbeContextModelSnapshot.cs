// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using mechanical.Data;

#nullable disable

namespace mechanical.Migrations
{
    [DbContext(typeof(CbeContext))]
    partial class CbeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("mechanical.Models.Entities.Case", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("ApplicantName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("BussinessLicenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CaseNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CaseOriginatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Segement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BussinessLicenceId");

                    b.HasIndex("CaseOriginatorId");

                    b.HasIndex("DistrictId");

                    b.ToTable("Cases");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<DateTime>("AssignmentDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("CollateralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CollateralId");

                    b.HasIndex("UserId");

                    b.ToTable("CaseAssignments");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CaseId");

                    b.ToTable("CaseComments");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseSchedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ScheduleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("CaseSchedules");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseTerminate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("CaseTerminates");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseTimeLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentStage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("UserId");

                    b.ToTable("CaseTimeLines");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Collateral", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("BlockNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BuildingStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Category")
                        .HasColumnType("int");

                    b.Property<string>("ChassisNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollateralType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CreatedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentStage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CurrentStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EngineMotorNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FloorNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseArea")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HouseNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Kebele")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LHCNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MachineName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ManufactureYear")
                        .HasColumnType("int");

                    b.Property<string>("ModelNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ownership")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlotOfLand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Purpose")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PurposeOfTheLand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Region")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("TypeOfFarming")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wereda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Zone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CaseId");

                    b.HasIndex("CreatedById");

                    b.ToTable("Collaterals");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CollateralReestimation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CollateralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CollateralId");

                    b.ToTable("CollateralReestimations");
                });

            modelBuilder.Entity("mechanical.Models.Entities.ConsecutiveNumber", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("NextNumber")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConsecutiveNumbers");
                });

            modelBuilder.Entity("mechanical.Models.Entities.ConstMngAgrMachinery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AllocatedPointsRange")
                        .HasColumnType("int");

                    b.Property<int>("CabinType")
                        .HasColumnType("int");

                    b.Property<string>("ChassisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CheckerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollateralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CoolingType")
                        .HasColumnType("int");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentEqpmntCondition")
                        .HasColumnType("int");

                    b.Property<double>("DepreciationRate")
                        .HasColumnType("float");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnginePower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<double>("EqpmntConditionFactor")
                        .HasColumnType("float");

                    b.Property<Guid>("EvaluatorUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float");

                    b.Property<int>("IgnitionSystem")
                        .HasColumnType("int");

                    b.Property<double>("InvoiceValue")
                        .HasColumnType("float");

                    b.Property<string>("MakerCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakerPreferenceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MarketShareFactor")
                        .HasColumnType("float");

                    b.Property<string>("ModelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NetEstimationValue")
                        .HasColumnType("float");

                    b.Property<int>("NoOfCylinder")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAxle")
                        .HasColumnType("int");

                    b.Property<string>("OverallSurveyAssesment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAndInstallationAssesment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ReplacementCost")
                        .HasColumnType("float");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TDNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnologyStandard")
                        .HasColumnType("int");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int");

                    b.Property<string>("WorkingProductionCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.Property<int>("constructionMiningAgriculturalMachineryType")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckerUserID");

                    b.HasIndex("CollateralId");

                    b.HasIndex("EvaluatorUserID");

                    b.ToTable("ConstMngAgrMachineries");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Correction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollateralID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentedAttribute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("CommentedByUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CommentedByUserIdsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("EquipmentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentedByUserIdsId");

                    b.ToTable("Corrections");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CreateRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CreateRoles");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CreateUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Branch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNO")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SupervisorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("emp_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("RoleId");

                    b.HasIndex("SupervisorId");

                    b.ToTable("CreateUsers");
                });

            modelBuilder.Entity("mechanical.Models.Entities.District", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("mechanical.Models.Entities.EmployeeInfoes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("emp_ID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("locationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("pr_Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supervisorEmpId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supervisorID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("supervisor_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("mechanical.Models.Entities.IndBldgFacilityEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AllocatedPointsRange")
                        .HasColumnType("int");

                    b.Property<Guid?>("CheckerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollateralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentEqpmntCondition")
                        .HasColumnType("int");

                    b.Property<double>("DepreciationRate")
                        .HasColumnType("float");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<double>("EqpmntConditionFactor")
                        .HasColumnType("float");

                    b.Property<Guid>("EvaluatorUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float");

                    b.Property<int>("IndustrialBuildingMachineryType")
                        .HasColumnType("int");

                    b.Property<double>("InvoiceValue")
                        .HasColumnType("float");

                    b.Property<string>("MakerCompany")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MakerPreferenceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MarketShareFactor")
                        .HasColumnType("float");

                    b.Property<string>("ModelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MotorPower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("NetEstimationValue")
                        .HasColumnType("float");

                    b.Property<string>("OtherTechSpec")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OverallSurveyAssesment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAndInstallationAssesment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PowerSupply")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ReplacementCost")
                        .HasColumnType("float");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TechnologyStandard")
                        .HasColumnType("int");

                    b.Property<string>("WorkingProductionCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckerUserID");

                    b.HasIndex("CollateralId");

                    b.HasIndex("EvaluatorUserID");

                    b.ToTable("IndBldgFacilityEquipment");
                });

            modelBuilder.Entity("mechanical.Models.Entities.MotorVehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<int>("AllocatedPointsRange")
                        .HasColumnType("int");

                    b.Property<int>("BodyType")
                        .HasColumnType("int");

                    b.Property<int>("CabinType")
                        .HasColumnType("int");

                    b.Property<string>("ChassisNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CheckerUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CollateralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CurrentEqpmntCondition")
                        .HasColumnType("int");

                    b.Property<double>("DepreciationRate")
                        .HasColumnType("float");

                    b.Property<string>("EngineNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnginePower")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EngineType")
                        .HasColumnType("int");

                    b.Property<double>("EqpmntConditionFactor")
                        .HasColumnType("float");

                    b.Property<Guid>("EvaluatorUserID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("ExchangeRate")
                        .HasColumnType("float");

                    b.Property<double>("InvoiceValue")
                        .HasColumnType("float");

                    b.Property<string>("LoadingCapacity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MarketShareFactor")
                        .HasColumnType("float");

                    b.Property<string>("ModelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MotorVehicleMake")
                        .HasColumnType("int");

                    b.Property<double>("NetEstimationValue")
                        .HasColumnType("float");

                    b.Property<int>("NoOfCylinder")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfAxle")
                        .HasColumnType("int");

                    b.Property<string>("OverallSurveyAssesment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicalAndInstallationAssesment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ReplacementCost")
                        .HasColumnType("float");

                    b.Property<string>("SerialNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TDNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TransmissionType")
                        .HasColumnType("int");

                    b.Property<int>("YearOfManufacture")
                        .HasColumnType("int");

                    b.Property<int>("coolingSystem")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CheckerUserID");

                    b.HasIndex("CollateralId");

                    b.HasIndex("EvaluatorUserID");

                    b.ToTable("MotorVehicles");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Reject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CollateralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RejectedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RejectionComment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Rejects");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Signatures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Emp_Id")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SignatureBase64String")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SignatureFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SignatureFileId")
                        .IsUnique();

                    b.ToTable("Signatures");
                });

            modelBuilder.Entity("mechanical.Models.Entities.UploadFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasDefaultValueSql("NEWID()");

                    b.Property<Guid>("CaseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Catagory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CollateralId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("UploadDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("userId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("UploadFiles");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Case", b =>
                {
                    b.HasOne("mechanical.Models.Entities.UploadFile", "BussinessLicence")
                        .WithMany()
                        .HasForeignKey("BussinessLicenceId");

                    b.HasOne("mechanical.Models.Entities.CreateUser", "CaseOriginator")
                        .WithMany()
                        .HasForeignKey("CaseOriginatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BussinessLicence");

                    b.Navigation("CaseOriginator");

                    b.Navigation("District");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseAssignment", b =>
                {
                    b.HasOne("mechanical.Models.Entities.Collateral", "Collateral")
                        .WithMany()
                        .HasForeignKey("CollateralId");

                    b.HasOne("mechanical.Models.Entities.CreateUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collateral");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseComment", b =>
                {
                    b.HasOne("mechanical.Models.Entities.CreateUser", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Case");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseSchedule", b =>
                {
                    b.HasOne("mechanical.Models.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseTerminate", b =>
                {
                    b.HasOne("mechanical.Models.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CaseTimeLine", b =>
                {
                    b.HasOne("mechanical.Models.Entities.Case", "Case")
                        .WithMany()
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("User");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Collateral", b =>
                {
                    b.HasOne("mechanical.Models.Entities.Case", "Case")
                        .WithMany("Collaterals")
                        .HasForeignKey("CaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Case");

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CollateralReestimation", b =>
                {
                    b.HasOne("mechanical.Models.Entities.Collateral", "Collateral")
                        .WithMany()
                        .HasForeignKey("CollateralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collateral");
                });

            modelBuilder.Entity("mechanical.Models.Entities.ConsecutiveNumber", b =>
                {
                    b.HasOne("mechanical.Models.Entities.CreateUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("mechanical.Models.Entities.ConstMngAgrMachinery", b =>
                {
                    b.HasOne("mechanical.Models.Entities.CreateUser", "CheckerUser")
                        .WithMany()
                        .HasForeignKey("CheckerUserID");

                    b.HasOne("mechanical.Models.Entities.Collateral", "Collateral")
                        .WithMany()
                        .HasForeignKey("CollateralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateUser", "EvaluatorUser")
                        .WithMany()
                        .HasForeignKey("EvaluatorUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckerUser");

                    b.Navigation("Collateral");

                    b.Navigation("EvaluatorUser");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Correction", b =>
                {
                    b.HasOne("mechanical.Models.Entities.CreateUser", "CommentedByUserIds")
                        .WithMany()
                        .HasForeignKey("CommentedByUserIdsId");

                    b.Navigation("CommentedByUserIds");
                });

            modelBuilder.Entity("mechanical.Models.Entities.CreateUser", b =>
                {
                    b.HasOne("mechanical.Models.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateUser", "Supervisor")
                        .WithMany()
                        .HasForeignKey("SupervisorId");

                    b.Navigation("District");

                    b.Navigation("Role");

                    b.Navigation("Supervisor");
                });

            modelBuilder.Entity("mechanical.Models.Entities.IndBldgFacilityEquipment", b =>
                {
                    b.HasOne("mechanical.Models.Entities.CreateUser", "CheckerUser")
                        .WithMany()
                        .HasForeignKey("CheckerUserID");

                    b.HasOne("mechanical.Models.Entities.Collateral", "Collateral")
                        .WithMany()
                        .HasForeignKey("CollateralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateUser", "EvaluatorUser")
                        .WithMany()
                        .HasForeignKey("EvaluatorUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckerUser");

                    b.Navigation("Collateral");

                    b.Navigation("EvaluatorUser");
                });

            modelBuilder.Entity("mechanical.Models.Entities.MotorVehicle", b =>
                {
                    b.HasOne("mechanical.Models.Entities.CreateUser", "CheckerUser")
                        .WithMany()
                        .HasForeignKey("CheckerUserID");

                    b.HasOne("mechanical.Models.Entities.Collateral", "Collateral")
                        .WithMany()
                        .HasForeignKey("CollateralId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("mechanical.Models.Entities.CreateUser", "EvaluatorUser")
                        .WithMany()
                        .HasForeignKey("EvaluatorUserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckerUser");

                    b.Navigation("Collateral");

                    b.Navigation("EvaluatorUser");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Signatures", b =>
                {
                    b.HasOne("mechanical.Models.Entities.UploadFile", "SignatureFile")
                        .WithOne()
                        .HasForeignKey("mechanical.Models.Entities.Signatures", "SignatureFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SignatureFile");
                });

            modelBuilder.Entity("mechanical.Models.Entities.Case", b =>
                {
                    b.Navigation("Collaterals");
                });
#pragma warning restore 612, 618
        }
    }
}
