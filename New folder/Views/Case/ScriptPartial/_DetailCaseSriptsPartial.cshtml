<script src="~/lib/datatable/js/jquery.datatables.min.js"></script>
<script src="~/lib/datatable/js/datatables.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/datatables.responsive.min.js"></script>
<script src="~/lib/datatable/js/responsive.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/datatables.buttons.min.js"></script>
<script src="~/lib/datatable/js/buttons.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/jszip.min.js"></script>
<script src="~/lib/datatable/js/pdfmake.min.js"></script>
<script src="~/lib/datatable/js/vfs_fonts.js"></script>
<script src="~/lib/datatable/js/buttons.html5.min.js"></script>
<script src="~/lib/datatable/js/buttons.print.min.js"></script>
<script src="~/lib/datatable/js/buttons.colvis.min.js"></script>
<script src="~/lib/toastr/toastr.min.js"></script>
<script>
    console.log("debug");
    $(document).ready(function () {
        $('#UpdateSchedule').on('click', function (event) {
            event.preventDefault();
            $('#datetimepicker-modal').modal('show');
        });
        $('#datetimepicker-form').submit(function (event) {
            event.preventDefault();
            var formData = new FormData(this);
            var Id = $('#CaseSchedulleId').val();
            formData.append('Id', Id);

            $.ajax({
                url: '/MOCase/UpdateSchedule',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    location.reload();
                },
                error: function () {
                    alert('Error occurred while updating the date.');
                }
            });
        });
        $('#AcceptButton').click(function (event) {
            event.preventDefault();
            var formData = new FormData();
            var Id = $('#CaseScheduleId').val();
            formData.append('Id', Id);

            $.ajax({
                url: '/MOCase/ApproveSchedule',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    location.reload();
                },
                error: function () {
                    alert('Error occurred while updating the date.');
                }
            });
        });
        
        $('#PlateName').on('input', function () {
            let value = $(this).val().replace(/[^0-9a-zA-Z]/g, '').substr(0, 10);
            let formattedValue = '';
            if (value.length >= 2) {
                formattedValue += value.substr(0, 2);
            } else {
                formattedValue += value;
            }
            if (value.length >= 2) {
                formattedValue += '-';
            }
            if (value.length >= 3 && /[a-zA-Z]/.test(value[2])) {
                formattedValue += value[2].toUpperCase();
            }
            if (value.length >= 4) {
                if (/[a-zA-Z]/.test(value[3])) {
                    formattedValue += value[3].toUpperCase();
                } else {
                    formattedValue += 'X';
                }
            }
            if (value.length >= 4) {
                formattedValue += '-';
            }
            if (value.length >= 5) {
                if (/[a-zA-Z]/.test(value[4])) {
                    formattedValue += value[4].toUpperCase();
                } else {
                    formattedValue += value[4];
                }
            }
            if (value.length >= 6) {
                formattedValue += value.substr(5);
            }
            $(this).val(formattedValue);
        });

        fetch('/UserManagment/GetDistrict')
            .then(response => response.json())
            .then(data => {
                var selectOption = $('<option selected disabled></option>').attr('value', '').text('Select Valuation Center');
                $('#CenterDropdown').append(selectOption);
                data.forEach(function (district) {
                    var option = $('<option></option>').attr('value', district.Id).text(district.Name);
                    $('#CenterDropdown').append(option);
                });
            })
            .catch(error => {
                console.log('Error fetching District data:', error);
            });

        var CaseId = $('#CaseId').val();
        $('#addCollateralButton').click(function () {
            $('#addCollateralModal').modal('show');
        });
        $('#proposeNewScheduleButton').click(function () {
            $('#proposeNewSchedule-modal').modal('show');
        });
        var caseCollateralsTable;

        $('#assignButton').on('click', function () {

            var checkedCollaterals = $('.purple-checkbox:checked');
            var selectedCollateralIds = [];

            checkedCollaterals.each(function () {
                var collateralId = $(this).val();
                selectedCollateralIds.push(collateralId);
            });
            if (selectedCollateralIds.length === 0) {
                toastr.error('Please select at least one collateral');
            } else {
                $('#selectedCollateralIds').val(selectedCollateralIds.join(','));

                $('#SendForEvaluationModal').modal('show');
            }
        });
        $('#sendEvaluationButton').on('click', function () {

            var checkedCollaterals = $('.purple-checkbox:checked');
            var selectedCollateralIds = [];

            checkedCollaterals.each(function () {
                var collateralId = $(this).val();
                selectedCollateralIds.push(collateralId);
            });
            if (selectedCollateralIds.length === 0) {
                toastr.error('Please select at least one collateral');
            } else {
                $('#selectedCollateralIds').val(selectedCollateralIds.join(','));

                $('#SendForEvaluationModal').modal('show');
            }
        });

        $('#selectAllCheckbox').on('click', function () {
            var isChecked = $(this).prop('checked');
            $('.purple-checkbox').prop('checked', isChecked);
        });

        $('#caseCollaterals tbody').on('change', '.purple-checkbox', function () {
            var allChecked = $('.purple-checkbox').length === $('.purple-checkbox:checked').length;
            $('#selectAllCheckbox').prop('checked', allChecked);
        });
        $('#assignForm').submit(function (e) {
            e.preventDefault();

            var formData = new FormData(this);

            $.ajax({
                url: '/Case/SendForValuation',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    toastr.success(response.message);
                    loadCollaterals();
                    $('#SendForEvaluationModal').modal('hide');
                },
                error: function (xhr, textStatus, errorThrown) {
                    var error = xhr.responseJSON;
                    toastr.error(error.message);
                }
            });
        });
       

        function loadComments() {
            $.ajax({
                url: '/CaseComment/GetCaseComments?caseId=' + CaseId,
                method: 'GET',
                success: function (data) {
                    var currentUserID = data.userId;
                    var caseComments = data.caseComments;
                    var countComment = data.caseComments.length;
                    $(".CommentBage").text(countComment);
                    console.log(countComment);
                    var users = [];

                    if (caseComments && caseComments.length > 0) {
                        caseComments.forEach(function (comment) {
                            var chatMsg = $('<div>').addClass('direct-chat-msg');
                            var chatInfos = $('<div>').addClass('direct-chat-infos clearfix');
                            var chatName = $('<a>');
                         
                            var chatImg = $('<a>');
                            var chatImgInner = $('<img>').attr('src', '/img/avatar5.png').addClass('direct-chat-img');
                            var chatText = $('<div>').addClass('direct-chat-text');

                            chatName.attr('href', '/UserManagment/Profile/' + comment.AuthorId);
                            chatImg.attr('href', '/UserManagment/Profile/' + comment.AuthorId);
                            chatImg.append(chatImgInner);

                            var createdAt = new Date(comment.CreatedAt);
                     

                            chatText.text(comment.Content);

                            if (comment.AuthorId === currentUserID) {
                                var chatTimestamp = $('<span>').addClass('direct-chat-timestamp');
                                $('<span>').addClass('direct-chat-name float-right').text(comment.AuthorName).appendTo(chatName);
                                chatMsg.addClass('right');
                            } else {
                                var chatTimestamp = $('<span>').addClass('direct-chat-timestamp float-right');
                                $('<span>').addClass('direct-chat-name').text(comment.AuthorName).appendTo(chatName);
                            }
                            var formattedDate = formatDate(createdAt);
                            chatTimestamp.text(formattedDate);

                            chatInfos.append(chatName, chatTimestamp);
                            chatMsg.append(chatInfos, chatImg, chatText);
                            $('.direct-chat-messages').append(chatMsg);

                            var existingUser = users.find(function (user) {
                                return user.id === comment.AuthorId;
                            });

                            if (!existingUser) {
                                var newUser = {
                                    id: comment.AuthorId,
                                    name: comment.AuthorName,
                                    avatar: '/img/avatar5.png',
                                    lastMessage: comment.Content,
                                    date: formattedDate
                                };
                                users.push(newUser);
                            }
                        });
                        populateContactList(users);
                    } else {
                        var noCommentsMsg = $('<div>').addClass('no-comments-msg').text('There are no comments related to this case.');
                        $('.direct-chat-messages').append(noCommentsMsg);
                    }
                },
                error: function () {
                    console.log('An error occurred while retrieving case comments.');
                }
            });
        }
        function populateContactList(users) {
            var contactList = $('.contacts-list');
            contactList.empty();

            users.forEach(function (user) {
                var listItem = $('<li>');
                var link = $('<a>').attr('href', '/UserManagment/Profile/' + user.id);
                var avatarImg = $('<img>').addClass('contacts-list-img').attr('src', user.avatar);
                var infoDiv = $('<div>').addClass('contacts-list-info');
                var nameSpan = $('<span>').addClass('contacts-list-name').text(user.name);
                var dateSpan = $('<small>').addClass('contacts-list-date float-right').text(formatDate(user.date));
                var messageSpan = $('<span>').addClass('contacts-list-msg').text(user.lastMessage);

                infoDiv.append(nameSpan, dateSpan);
                link.append(avatarImg, infoDiv, messageSpan);
                listItem.append(link);
                contactList.append(listItem);
            });
        }
        function formatDate(date) {
            var options = { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true };
            return date.toLocaleString('en-US', options);
        }

        loadComments();

        function sendMessage(message,CaseId) {
            var requestData = {
                Content: message,
                CaseId: CaseId
            };

            $.ajax({
                url: '/CaseComment/CreateCaseComment', 
                method: 'POST',
                data: requestData,
                success: function (response) {
                    console.log(response);
                    $('#messageinput').val('');
                    var chatMessages = $('.direct-chat-messages');
                    var scrollHeight = chatMessages[0].scrollHeight;
                    chatMessages.scrollTop(scrollHeight);
                },
                error: function () {
                    console.log('Error while sending the message.');
                }
            });
        }

        $('#SendButton').click(function (e) {
            e.preventDefault();
            var message = $('input[name="message"]').val();
            if (message.trim() !== '') {
                // Send the message
                sendMessage(message,CaseId);
                location.reload();
                $('.nav-tabs a[href="#custom-tabs-four-settings"]').tab('show');
                // loadComments();
                var chatMessages = $('.direct-chat-messages');
                var scrollHeight = chatMessages[0].scrollHeight;
                chatMessages.scrollTop(scrollHeight);
            }
        });

        var CaseId = $('#CaseId').val();
        function initializeDataTable(data) {
            caseCollateralsTable = $('#caseCollaterals').DataTable({
                language: {
                    emptyTable: "There is no collateral register for this case please click the above add button to add collaterals"
                },
                responsive: true,
                pageLength: 8,
                lengthChange: false,
                autoWidth: false,
                buttons: ["copy", "csv", "excel", { extend: 'pdf', title: 'My Case - pdf' }, { extend: 'print', title: 'My Case - Print' }, "colvis"],
                data: data,
                columns: [
                    {
                        data: null,
                        render: function (data, type, row, meta) {
                            return '<input class="purple-checkbox" type="checkbox"  value="' + data.Id + '">';
                        }
                    },
                    { data: 'PropertyOwner', width: '25%' },
                    { data: 'Role', width: '25%' },
                    { data: 'CollateralType', width: '35%' },
                    
                    {
                        data: 'Id',
                        width: '10%',
                        render: function (data, type, row, meta) {
                            return '<a href="@Url.Action("Detail", "Collateral")?Id=' + data + '">Details | </a><a href="@Url.Action("Edit", "Collateral")?Id=' + data + '"> Edit | </a> <a class="delete-link" href="#" data-id=' + data + '><span class="text-danger"> Delete</span></a>';
                        }
                    }
                ]
            }).buttons().container().appendTo('#caseCollaterals_wrapper .col-md-6:eq(0)');

            $('.delete-link').on('click', function (e) {
                e.preventDefault();
                var itemId = $(this).data('id');
                console.log(itemId);
                $('#deleteItem').data('id', itemId);
                $('#deleteConfirmationModal').modal('show');
            });
            //this is to delete the collateral
            $('#deleteItem').on('click', function () {
                var itemId = $(this).data('id');
                $.ajax({
                    url: '@Url.Action("DeleteCocllateral", "Collateral")',
                    type: 'POST',
                    data: { id: itemId },
                    success: function (result) {
                        toastr.success('Collateral deleted successfully.');
                        // setTimeout(function () {
                        loadCollaterals();
                        // }, 2000);
                    },
                    error: function (xhr, status, error) {
                        toastr.error('unable to delete Collateral.');
                    }
                });

                $('#deleteConfirmationModal').modal('hide');
            });
        }

        function loadCollaterals() {
            $.ajax({
                url: '/Collateral/GetCollaterals?CaseId=' + CaseId,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if ($.fn.DataTable.isDataTable('#caseCollaterals')) {
                        var caseCollateralsTable = $('#caseCollaterals').DataTable();
                        caseCollateralsTable.destroy();
                    }
                    initializeDataTable(data);
                },
                error: function (error) {
                    toastr.error("Failed to load collaterals");
                    console.log(error);
                }
            });
        }
        $('#addMechanicalCollateralForm').submit(function (e) {
            e.preventDefault();
            var formDataArray = $(this).serializeArray();
            console.log("here");
            var Category = getAttributeByName(formDataArray, 'Category');
            if (Category == "MOV" || Category == "CMAMachinery") {
                var PlateName = getAttributeByName(formDataArray, 'PlateNo').trim();
                var ChassisNo = getAttributeByName(formDataArray, 'ChassisNo').trim();
                if (PlateName === "" || ChassisNo === "") {
                    toastr.error("Please fill in all required fields.");
                    return;
                }
            } else if (Category == "IBFEqupment") {
                var MachineName = getAttributeByName(formDataArray, 'MachineName').trim();
                var Purpose = getAttributeByName(formDataArray, 'Purpose').trim();


                if (MachineName === "" || Purpose === "" ) {
                    toastr.error("Please fill in all required fields.");
                    return;
                }
            }


            var formData = new FormData(this);

            $.ajax({
                url: '/Collateral/Create',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    toastr.success(response.message);

                    $('#addMechanicalCollateralModal').modal('hide');
                    loadCollaterals();
                },
                error: function (error) {
                    toastr.error("Unable to create collateral");
                    console.log(error);
                }
            });
        });
        loadCollaterals();
        $('#addCivilCollateralForm').submit(function (e) {
            e.preventDefault();
            var formDataArray = $(this).serializeArray();
            console.log("here");
            var Category = getAttributeByName(formDataArray, 'Category');
            if (Category == "MOV" || Category == "CMAMachinery") {
                var PlateName = getAttributeByName(formDataArray, 'PlateNo').trim();
                var ChassisNo = getAttributeByName(formDataArray, 'ChassisNo').trim();
                if (PlateName === "" || ChassisNo === "") {
                    toastr.error("Please fill in all required fields.");
                    return;
                }
            } else if (Category == "IBFEqupment") {
                var MachineName = getAttributeByName(formDataArray, 'MachineName').trim();
                var Purpose = getAttributeByName(formDataArray, 'Purpose').trim();


                if (MachineName === "" || Purpose === "") {
                    toastr.error("Please fill in all required fields.");
                    return;
                }
            }


            var formData = new FormData(this);

            $.ajax({
                url: '/Collateral/CreateCivil',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    toastr.success(response.message);

                    $('#addCivilCollateralModal').modal('hide');
                    loadCollaterals();
                },
                error: function (error) {
                    toastr.error("Unable to create collateral");
                    console.log(error);
                }
            });
        });
        loadCollaterals();
        $('#addAgricultureCollateralForm').submit(function (e) {
            e.preventDefault();
            var formDataArray = $(this).serializeArray();
            console.log("here");
            var Category = getAttributeByName(formDataArray, 'Category');
            if (Category == "MOV" || Category == "CMAMachinery") {
                var PlateName = getAttributeByName(formDataArray, 'PlateNo').trim();
                var ChassisNo = getAttributeByName(formDataArray, 'ChassisNo').trim();
                if (PlateName === "" || ChassisNo === "") {
                    toastr.error("Please fill in all required fields.");
                    return;
                }
            } else if (Category == "IBFEqupment") {
                var MachineName = getAttributeByName(formDataArray, 'MachineName').trim();
                var Purpose = getAttributeByName(formDataArray, 'Purpose').trim();


                if (MachineName === "" || Purpose === "") {
                    toastr.error("Please fill in all required fields.");
                    return;
                }
            }


            var formData = new FormData(this);

            $.ajax({
                url: '/Collateral/CreateAgriculture',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    toastr.success(response.message);

                    $('#addAgricultureCollateralModal').modal('hide');
                    loadCollaterals();
                },
                error: function (error) {
                    toastr.error("Unable to create collateral");
                    console.log(error);
                }
            });
        });
        loadCollaterals();
        function getAttributeByName(formDataArray, name) {
            for (var i = 0; i < formDataArray.length; i++) {
                if (formDataArray[i].name === name) {
                    return formDataArray[i].value;
                }
            }
            return null; // Attribute not found
        }
        
        var chatMessages = $('.direct-chat-messages');
        var scrollHeight = chatMessages[0].scrollHeight;
        chatMessages.scrollTop(scrollHeight);

        //$('#custom-tabs-four-profile-tab').on('shown.bs.tab', function (e) {
        //    loadCollaterals();
        //});

        $("#IndusteryProp").hide();
        $("#MVprop").hide();

        var typeDropdown = $("#typeDropdown");
        typeDropdown.prop("disabled", true);
        function populateTypeDropdown() {
            var category = $("#categoryDropdown").val();
            typeDropdown = $("#typeDropdown");
            typeDropdown.empty();
            typeDropdown.append('<option value="" disabled selected>Select Equipment Type</option>');

            switch (category) {
                case "MOV":
                    typeDropdown.append('<option value="Automobile">Automobile</option>');
                    typeDropdown.append('<option value="Bus">Bus</option>');
                    typeDropdown.append('<option value="Minibus">Minibus</option>');
                    typeDropdown.append('<option value="Truck">Truck</option>');
                    typeDropdown.append('<option value="TruckWithTrail">Truck with trail</option>');
                    typeDropdown.append('<option value="Hatchback">Hatchback</option>');
                    typeDropdown.append('<option value="SUV">SUV</option>');
                    typeDropdown.append('<option value="Minivan">Minivan</option>');
                    typeDropdown.append('<option value="StationWagon">Station Wagon</option>');
                    typeDropdown.append('<option value="Sedan">Sedan</option>');
                    typeDropdown.append('<option value="Coupe">Coupe</option>');
                    typeDropdown.append('<option value="Crossover">Crossover</option>');
                    typeDropdown.append('<option value="Convertible">Convertible</option>');
                    typeDropdown.append('<option value="SportsCar">Sports car</option>');
                    typeDropdown.append('<option value="Pickup">Pickup</option>');
                    typeDropdown.append('<option value="MUV">MUV</option>');
                    typeDropdown.append('<option value="Motorcycles">Motorcycles</option>');
                    typeDropdown.append('<option value="CompactCar">Compact car</option>');
                    typeDropdown.append('<option value="Limousine">Limousine</option>');
                    typeDropdown.append('<option value="Taxi">Taxi</option>');
                    typeDropdown.append('<option value="FamilyCar">Family car</option>');
                    typeDropdown.append('<option value="RecreationalVehicle">Recreational vehicle</option>');
                    typeDropdown.append('<option value="FullSizeCar">Full-size car</option>');
                    typeDropdown.append('<option value="Roadster">Roadster</option>');
                    typeDropdown.append('<option value="CUV">CUV</option>');
                    typeDropdown.append('<option value="Others">Others, please specify</option>');

                    $("#IndusteryProp").hide();
                    $("#MVprop").show();
                    break;
                case "CMAMachinery":
                    typeDropdown.append('<option value="ChainExcavator">Chain Excavator</option>');
                    typeDropdown.append('<option value="BullDozer">Bull Dozer</option>');
                    typeDropdown.append('<option value="WheelLoader">Wheel Loader</option>');
                    typeDropdown.append('<option value="MotorGrader">Motor Grader</option>');
                    typeDropdown.append('<option value="DryCargoTruck">Dry Cargo Truck</option>');
                    typeDropdown.append('<option value="ConcreteMixer">Concrete Mixer</option>');
                    typeDropdown.append('<option value="PowerTruck">Power Truck</option>');
                    typeDropdown.append('<option value="BulkCementCargo">Bulk Cement Cargo</option>');
                    typeDropdown.append('<option value="ChainLoader">Chain Loader</option>');
                    typeDropdown.append('<option value="SewageCleanerTruck">Sewage Cleaner Truck</option>');
                    typeDropdown.append('<option value="ClosedCargoTruck">Closed Cargo Truck</option>');
                    typeDropdown.append('<option value="DrawBarTrailer">Draw Bar Trailer</option>');
                    typeDropdown.append('<option value="RigidDumpTruck">Rigid Dump Truck</option>');
                    typeDropdown.append('<option value="ConcretePump">Concrete Pump</option>');
                    typeDropdown.append('<option value="FuelCargo">Fuel Cargo</option>');
                    typeDropdown.append('<option value="WaterSprinkler">Water Sprinkler</option>');
                    typeDropdown.append('<option value="TipperDumpTruck">Tipper Dump Truck</option>');
                    typeDropdown.append('<option value="CargoHalfCraneTruck">Cargo Half Crane Truck</option>');
                    typeDropdown.append('<option value="MobileCrane">Mobile Crane</option>');
                    typeDropdown.append('<option value="LowBed2AxleSemiTrailer">Low Bed 2Axle Semi Trailer</option>');
                    typeDropdown.append('<option value="LowBed3AxleSemiTrailer">Low Bed 3Axle Semi Trailer</option>');
                    typeDropdown.append('<option value="ConcertBatchingPlant">Concert Batching Plant</option>');
                    typeDropdown.append('<option value="AsphaltBatchingPlant">Asphalt Batching Plant</option>');
                    typeDropdown.append('<option value="DrillingRig">Drilling Rig</option>');
                    typeDropdown.append('<option value="Compactor">Compactor</option>');
                    typeDropdown.append('<option value="Backhoe">Backhoe</option>');
                    typeDropdown.append('<option value="WheelTractorScraper">Wheel Tractor-Scraper</option>');
                    typeDropdown.append('<option value="BackhoeLoader">Backhoe Loader</option>');
                    typeDropdown.append('<option value="SkidSteerLoader">Skid-Steer Loader</option>');
                    typeDropdown.append('<option value="TelescopicHandler">Telescopic Handler</option>');
                    typeDropdown.append('<option value="DragLineExcavator">Drag-line Excavator</option>');
                    typeDropdown.append('<option value="Forklift">Forklift</option>');
                    typeDropdown.append('<option value="FactoryMachinery">Factory Machinery</option>');
                    typeDropdown.append('<option value="Tractor">Tractor</option>');
                    typeDropdown.append('<option value="CombineHarvester">Combine Harvester</option>');
                    typeDropdown.append('<option value="ATVOrUTV">ATV or UTV</option>');
                    typeDropdown.append('<option value="TractorWithDiscPlow">Tractor with Disc plow</option>');
                    typeDropdown.append('<option value="TractorWithDiscHarrow">Tractor with Disc harrow</option>');
                    typeDropdown.append('<option value="TractorWithDiscPloughAndDiscHarrow">Tractor with Disc plough & Disc harrow</option>');
                    typeDropdown.append('<option value="TractorWithBackhoe">Tractor with backhoe</option>');
                    typeDropdown.append('<option value="TractorWithLoader">Tractor with loader</option>');
                    typeDropdown.append('<option value="TractorWithBucket">Tractor with bucket</option>');
                    typeDropdown.append('<option value="TractorWithTrolleyOrTrailer">Tractor with trolley/trailer</option>');
                    typeDropdown.append('<option value="TractorWithSeeder">Tractor with seeder</option>');
                    typeDropdown.append('<option value="TractorWithChemicalSpreader">Tractor with Chemical spreader</option>');
                    typeDropdown.append('<option value="TractorWithCultivator">Tractor with cultivator</option>');
                    typeDropdown.append('<option value="TractorWithBaler">Tractor with baler</option>');
                    typeDropdown.append('<option value="TractorWithRotavator">Tractor with Rotavator</option>');
                    typeDropdown.append('<option value="DiscPlow">Disc plow</option>');
                    typeDropdown.append('<option value="DiscHarrow">Disc harrow</option>');
                    typeDropdown.append('<option value="Harvester">Harvester</option>');
                    typeDropdown.append('<option value="Other">Others, please specify</option>');
                    $("#IndusteryProp").hide();
                    $("#MVprop").show();
                    break;
                case "IBFEqupment":
                    typeDropdown.append('<option value="Industrial (Mfg.) Process Line Equipment">Industrial (Mfg.) Process Line Equipment</option>');
                    typeDropdown.append('<option value="HVAC system, Fuel Station and Security Apparatus etc">HVAC system, Fuel Station and Security Apparatus etc</option>');
                    typeDropdown.append('<option value="Hotel, Office, Laboratory Equipment etc">Hotel, Office, Laboratory Equipment etc</option>');
                    $("#IndusteryProp").show();
                    $("#MVprop").hide();
                    break;
                default:
                    break;
            }
        }
        $("#categoryDropdown").change(function () {
            typeDropdown.prop("disabled", false);
            populateTypeDropdown();
        });
        populateTypeDropdown();
        var chatMessages = $('.direct-chat-messages');
        var scrollHeight = chatMessages[0].scrollHeight;
        chatMessages.scrollTop(scrollHeight);
     
        $('#proposeNewSchedule-form').submit(function (event) {
            event.preventDefault();
            var formData = new FormData(this);
            var Id = $('#CaseScheduleId').val();
            formData.append('id', Id);

            $.ajax({
                url: '/Case/CreateSchedule',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    location.reload();
                    // Handle success response
                },
                error: function () {
                    $('#evaluationForm').append('<p class="text-danger">Error occurred while creating the schedule.</p>');
                }
            });
        });

    });
</script>
 