<script src="~/lib/datatable/js/jquery.datatables.min.js"></script>
<script src="~/lib/datatable/js/datatables.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/datatables.responsive.min.js"></script>
<script src="~/lib/datatable/js/responsive.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/datatables.buttons.min.js"></script>
<script src="~/lib/datatable/js/buttons.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/jszip.min.js"></script>
<script src="~/lib/datatable/js/pdfmake.min.js"></script>
<script src="~/lib/datatable/js/vfs_fonts.js"></script>
<script src="~/lib/datatable/js/buttons.html5.min.js"></script>
<script src="~/lib/datatable/js/buttons.print.min.js"></script>
<script src="~/lib/datatable/js/buttons.colvis.min.js"></script>
<script src="~/lib/toastr/toastr.min.js"></script>

<script>
    $(document).ready(function () {
        console.log("Document ready initialized");

        // Initialize variables
        const collateralId = $('#TxtmovId').val();
        const equipmentId = $('#TxtEquipmentId').val();
        console.log("Collateral ID:", collateralId);
        console.log("Equipment ID:", equipmentId);

        // Modal Handlers
        $('#showCollateralFile').click(() => $('#CollateralFileModal').modal('show'));

        // Comment Box Handlers
        $('.show-comment-box').click(function() {
            const modal = $(this).data('target');
            const fieldId = $(this).data('field-id');
            const comment = $(this).data('comment') || '';

            $('#comment').val(comment);
            $(modal)
                .modal('show')
                .data('field-id', fieldId)
                .find('.save-comment, .Replay-comment')
                .attr('data-field-id', fieldId);
        });

        $('.save-comment').click(submitComment);
        $('.Replay-comment').click(submitReply);

        // Status Change Buttons
        $("#checkedButton").click(() => confirmAction("Complete"));
        $("#saveButton").click(() => sendRequest("saved"));
        $(".correctionButton").click(() => confirmAction("correction"));
        $("#btnSaveForResubmiting").click(() => saveReValuation("Save"));

        // Comment Display
        document.querySelector("#btnComment").addEventListener("click", event => {
            $('#CommentModal').text(event.target.dataset.comment || 'No comment available');
        });

        // Core Functions
        function submitComment() {
            submitCorrectionData($(this).data('field-id'), '/Correction/Create');
        }

        function submitReply() {
            submitCorrectionData($('#CommentBoxModal').data('field-id'), '/Correction/ReplayForCheckerCorrections');
        }

        function submitCorrectionData(fieldId, endpoint) {
            if (!fieldId) {
                toastr.error('Missing field ID');
                return;
            }

            const formData = new FormData();
            formData.append('CollateralID', collateralId);
            formData.append('EquipmentId', equipmentId);
            formData.append('Comment', $('#comment').val());
            formData.append('CommentedAttribute', fieldId);
            formData.append('Controller', "ConstMngAgrMachinery");
            formData.append('Action', "GetEvaluatedconstMngAgriMachinery");

            $.ajax({
                url: endpoint,
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                    success: function(response) {
                        // Handle both JSON and redirect responses
                        if (response === "") { // Empty response indicates Ok() from server
                            toastr.success('Comment submitted successfully');
                            setTimeout(() => {
                                location.reload();
                            }, 2000);
                        }
                        else if (response.success) { // Handle JSON responses if needed
                            toastr.success(response.message || 'Operation successful');
                            setTimeout(() => {
                                location.reload();
                            }, 2000);
                        }
                        else {
                            // Handle redirect responses if present
                            if (response.redirectUrl) {
                                window.location.href = response.redirectUrl;
                            } else {
                                toastr.error(response.message || 'Action completed but with unexpected response');
                            }
                        }
                    },
                error: function(xhr) {
                    toastr.error('Error: ' + xhr.statusText);
                    console.error(xhr.responseText);
                }
            });
        }

        function confirmAction(action) {
            const actionMessages = {
                'Complete': 'send this evaluation to the Relational Manager',
                'correction': 'return this for correction',
                'saved': 'save this evaluation'
            };

            if (confirm(`Are you sure you want to ${actionMessages[action] || action}?`)) {
                sendRequest(action);
            }
        }

        function sendRequest(action) {
            $.ajax({
                url: "/Collateral/changeCollateralStatus",
                method: "POST",
                data: { status: action, Id: collateralId },
                success: function(response) {
                    if (response.success) {
                        toastr.success(`Status changed to ${action}`);
                        setTimeout(() => {
                            window.location.href = '/CO/Mycases';
                        }, 2000);
                    } else {
                        toastr.error(response.message || 'Action failed');
                    }
                },
                error: function(xhr) {
                    toastr.error('Error: ' + xhr.statusText);
                    console.error(xhr.responseText);
                }
            });
        }

        function saveReValuation(action) {
            console.log("Saving revaluation...");
            $.ajax({
                url: "/MOCase/Mycases",
                method: "POST",
                data: { action: action, id: collateralId },
                success: function(response) {
                    toastr.success('Revaluation saved successfully');
                },
                error: function(xhr) {
                    toastr.error('Failed to save revaluation');
                }
            });
        }

    });
    $(document).ready(function (){
         const collateralId = $('#TxtmovId').val();
         const equipmentId = $('#TxtEquipmentId').val();
     function LoadCorrectionHistory() {
            console.log("Loading correction history...");

            if (!collateralId) {
                console.error("Collateral ID is missing!");
                return;
            }

            $.ajax({
                url: '/Collateral/GetCollateralCorrectionHistory',
                method: 'GET',
                data: { CollateralId: collateralId },
                success: function(data) {
                    renderCorrectionHistory(data);
                },
                error: function(xhr) {
                    console.error('Failed to load correction history');
                    toastr.error('Failed to load history: ' + xhr.statusText);
                }
            });
        }

        function renderCorrectionHistory(data) {
            const $container = $('#CorrectionHistoryModal .correctionHistories').empty();
            const countComments = data.caseComments?.length || 0;

            $(".CorrectionBage").text(countComments);

            if (countComments > 0) {
                data.caseComments.forEach(function(comments) {
                    const card = $('<div>').addClass('card mb-3 direct-chat-card');
                    const cardBody = $('<div>').addClass('card-body');

                    const chatName = $('<a>')
                        .attr('href', '/UserManagment/Profile/' + comments.CommentByUserId)
                        .addClass('direct-chat-name');

                    GetUserInfo(comments.CommentByUserId).then(username => {
                        chatName.append($('<span>').text(username));
                    });

                    const createdAt = new Date(comments.CreatedAt);
                    const formattedDate = formatDate(createdAt);

                    cardBody.append(
                        chatName,
                        $('<span>').addClass('direct-chat-timestamp float-right').text(formattedDate),
                        $('<div>').html(`<strong>Commented Field Name:</strong> ${comments.CommentedFieldName}`),
                        $('<div>').html(`<strong>Comment:</strong> ${comments.Content}`),
                        $('<div>').html(`<strong>Type:</strong> ${comments.MessageType}`)
                    );

                    card.append(cardBody);
                    $container.append(card);
                });
            } else {
                $container.append('<div class="no-comments-msg">There are no comments</div>');
            }
        }

        function GetUserInfo(userId) {
            return new Promise((resolve, reject) => {
                $.ajax({
                    url: '/UserManagment/GetuserInfos',
                    method: 'GET',
                    data: { id: userId },
                    success: function(data) {
                        resolve(data?.Name || 'Unknown User');
                    },
                    error: function(xhr) {
                        console.error('Failed to fetch user info');
                        resolve('Unknown User');
                    }
                });
            });
        }

        function formatDate(date) {
            const options = {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: 'numeric',
                minute: 'numeric',
                hour12: true
            };
            return date.toLocaleString('en-US', options);
        }

        // Initial load
        LoadCorrectionHistory();

    });
</script>