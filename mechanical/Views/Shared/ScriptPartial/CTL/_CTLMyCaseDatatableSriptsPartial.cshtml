<script src="~/lib/datatable/js/jquery.datatables.min.js"></script>
<script src="~/lib/datatable/js/datatables.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/datatables.responsive.min.js"></script>
<script src="~/lib/datatable/js/responsive.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/datatables.buttons.min.js"></script>
<script src="~/lib/datatable/js/buttons.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/jszip.min.js"></script>
<script src="~/lib/datatable/js/pdfmake.min.js"></script>
<script src="~/lib/datatable/js/vfs_fonts.js"></script>
<script src="~/lib/datatable/js/buttons.html5.min.js"></script>
<script src="~/lib/datatable/js/buttons.print.min.js"></script>
<script src="~/lib/datatable/js/buttons.colvis.min.js"></script>
<script src="~/lib/toastr/toastr.min.js"></script>
<script>
    $(document).ready(function () {
        var CaseId = $('#CaseId').val();

        fetch('/UserManagment/GetCheckerOfficer')
            .then(response => response.json())
            .then(data => {
                var selectOption = $('<option selected disabled></option>').attr('value', '').text('Select Checker Officer');
                $('#employeeDropdown').append(selectOption);
                data.forEach(function (employee) {
                    var option = $('<option></option>').attr('value', employee.Id).text(employee.Name);
                    $('#employeeDropdown').append(option);

                });
            })
            .catch(error => {
                console.log('Error fetching employee data:', error);
            });

        $('#assignButton').on('click', function () {

            var checkedCollaterals = $('.purple-checkbox:checked');
            var selectedCollateralIds = [];

            checkedCollaterals.each(function () {
                var collateralId = $(this).val();
                selectedCollateralIds.push(collateralId);
            });
            if (selectedCollateralIds.length === 0) {
                toastr.error('Please select at least one collateral');
            } else {
                $('#selectedCollateralIds').val(selectedCollateralIds.join(','));

                $('#assignModal').modal('show');
            }
        });

        $('#selectAllCheckbox').on('click', function () {
            var isChecked = $(this).prop('checked');
            $('.purple-checkbox').prop('checked', isChecked);
        });

        $('#caseCollaterals tbody').on('change', '.purple-checkbox', function () {
            var allChecked = $('.purple-checkbox').length === $('.purple-checkbox:checked').length;
            $('#selectAllCheckbox').prop('checked', allChecked);
        });


        function initializeDataTable(data) {
            caseCollateralsTable = $('#caseCollaterals').DataTable({
                language: {
                    emptyTable: "There is no collateral register for this case"
                },
                responsive: true,
                pageLength: 5,
                lengthChange: false,
                autoWidth: false,
                buttons: ["copy", "csv", "excel", { extend: 'pdf', title: 'My Case - pdf' }, { extend: 'print', title: 'My Case - Print' }, "colvis"],
                data: data,
                columns: [
                    {
                        data: null,
                        render: function (data, type, row, meta) {
                            return '<input class="purple-checkbox" type="checkbox"  value="' + data.Id + '">';
                        }
                    },
                    { data: 'PropertyOwner', width: '20%' },
                    { data: 'Role', width: '15%' },
                    { data: 'Category', width: '25%' },
                    { data: 'MechanicalEqpmntName', width: '25%' },
                    {
                        data: 'Id',
                        width: '15%',
                        render: function (data, type, row, meta) {
                            return '<a href="@Url.Action("Detail", "Collateral")?Id=' + data + '">Details | </a>  <a  onclick="fetchCollateralDetails(\'' + data + '\')"> Documents <i class="fa fa-file"></i> </a>';
                        }
                    }
                ]
            }).buttons().container().appendTo('#caseCollaterals_wrapper .col-md-6:eq(0)');
        }
        function loadComments() {
            $.ajax({
                url: '/CaseComment/GetCaseComments?caseId=' + CaseId,
                method: 'GET',
                success: function (data) {
                    var currentUserID = data.userId;
                    var caseComments = data.caseComments;
                    var countComment = data.caseComments.length;
                    $(".CommentBage").text(countComment);
                    console.log(countComment);
                    var users = [];

                    if (caseComments && caseComments.length > 0) {
                        caseComments.forEach(function (comment) {
                            var chatMsg = $('<div>').addClass('direct-chat-msg');
                            var chatInfos = $('<div>').addClass('direct-chat-infos clearfix');
                            var chatName = $('<a>');

                            var chatImg = $('<a>');
                            var chatImgInner = $('<img>').attr('src', '/img/avatar5.png').addClass('direct-chat-img');
                            var chatText = $('<div>').addClass('direct-chat-text');

                            chatName.attr('href', '/UserManagment/Profile/' + comment.AuthorId);
                            chatImg.attr('href', '/UserManagment/Profile/' + comment.AuthorId);
                            chatImg.append(chatImgInner);

                            var createdAt = new Date(comment.CreatedAt);


                            chatText.text(comment.Content);

                            if (comment.AuthorId === currentUserID) {
                                var chatTimestamp = $('<span>').addClass('direct-chat-timestamp');
                                $('<span>').addClass('direct-chat-name float-right').text(comment.AuthorName).appendTo(chatName);
                                chatMsg.addClass('right');
                            } else {
                                var chatTimestamp = $('<span>').addClass('direct-chat-timestamp float-right');
                                $('<span>').addClass('direct-chat-name').text(comment.AuthorName).appendTo(chatName);
                            }
                            var formattedDate = formatDate(createdAt);
                            chatTimestamp.text(formattedDate);

                            chatInfos.append(chatName, chatTimestamp);
                            chatMsg.append(chatInfos, chatImg, chatText);
                            $('.direct-chat-messages').append(chatMsg);

                            var existingUser = users.find(function (user) {
                                return user.id === comment.AuthorId;
                            });

                            if (!existingUser) {
                                var newUser = {
                                    id: comment.AuthorId,
                                    name: comment.AuthorName,
                                    avatar: '/img/avatar5.png',
                                    lastMessage: comment.Content,
                                    date: formattedDate
                                };
                                users.push(newUser);
                            }
                        });
                        populateContactList(users);
                    } else {
                        var noCommentsMsg = $('<div>').addClass('no-comments-msg').text('There are no comments related to this case.');
                        $('.direct-chat-messages').append(noCommentsMsg);
                    }
                },
                error: function () {
                    console.log('An error occurred while retrieving case comments.');
                }
            });
        }
        function populateContactList(users) {
            var contactList = $('.contacts-list');
            contactList.empty();

            users.forEach(function (user) {
                var listItem = $('<li>');
                var link = $('<a>').attr('href', '/UserManagment/Profile/' + user.id);
                var avatarImg = $('<img>').addClass('contacts-list-img').attr('src', user.avatar);
                var infoDiv = $('<div>').addClass('contacts-list-info');
                var nameSpan = $('<span>').addClass('contacts-list-name').text(user.name);
                var dateSpan = $('<small>').addClass('contacts-list-date float-right').text(formatDate(user.date));
                var messageSpan = $('<span>').addClass('contacts-list-msg').text(user.lastMessage);

                infoDiv.append(nameSpan, dateSpan);
                link.append(avatarImg, infoDiv, messageSpan);
                listItem.append(link);
                contactList.append(listItem);
            });
        }
        function formatDate(date) {
            var options = { year: 'numeric', month: 'short', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true };
            return date.toLocaleString('en-US', options);
        }

        loadComments();

            function LoadCorrectionHistory() {
        $.ajax({
            url: '/CaseComment/GetCaseCorrectionHistory?caseId=' + CaseId,
            method: 'GET',
            success: function (data) {
                var currentUserID = data.userId;
                var caseCorrections = data.caseComments; // Assuming this is an array of comments
                var countComments = caseCorrections.length;
                $(".CorrectionBage").text(countComments);

                // Clear previous messages
                $('.correctionHistories').empty();

                if (caseCorrections && caseCorrections.length > 0) {
                    caseCorrections.forEach(function (comments) {
                        // Create a card for each comment
                        var card = $('<div>').addClass('card mb-3 direct-chat-card'); // Card for each comment
                        var cardBody = $('<div>').addClass('card-body');

                        // Create elements for user information and comment details
                        var chatName = $('<a>').attr('href', '/UserManagment/Profile/' + comments.CommentByUserId).addClass('direct-chat-name');
                        chatName.append(GetUserInfo(comments.CommentByUserId).then(username => {
                            $('<span>').text(username).appendTo(chatName);
                        }));

                        var createdAt = new Date(comments.CreatedAt);
                        var formattedDate = formatDate(createdAt);

                        var commentedFieldName = $('<div>').html(`<strong>Commented Field Name:</strong> ${comments.CommentedFieldName}`);
                        var commentText = $('<div>').html(`<strong>Comment:</strong> ${comments.Content}`);
                        var commentType = $('<div>').html(`<strong>Type:</strong> ${comments.MessageType}`);
                        var timestamp = $('<span>').addClass('direct-chat-timestamp float-right').text(formattedDate);

                        // Append elements to the card body
                        cardBody.append(chatName, timestamp, commentedFieldName, commentText, commentType);
                        card.append(cardBody);
                        $('.correctionHistories').append(card); // Add the card to the list
                    });
                } else {
                    var noCommentsMsg = $('<div>').addClass('no-comments-msg').text('There are no comments related to this case.');
                    $('.correctionHistories').append(noCommentsMsg);
                }
            },
            error: function () {
                console.log('An error occurred while retrieving case comments.');
            }
        });
    }

    function GetUserInfo(Id, callback){
        return new Promise(function(resolve , reject){

              $.ajax({
            url: '/UserManagment/GetuserInfos?id=' + Id,
            method: 'GET',
            success: function (data) {
                var currentUserID = data
                // var caseCorrections = data.caseComments; // Assuming this is an array of comments
                // var countComment = data.caseComments.length;
                ResponseData= currentUserID.Name;
                                console.log('An error occurred while retrieving case comments.'+ResponseData);
              resolve(currentUserID.Name);
            },
            error: function () {
                console.log('An error occurred while retrieving case comments.');
                reject(null);
            }
        });

        })


    }
    // Call the function to load correction history
    LoadCorrectionHistory();
        function sendMessage(message, CaseId) {
            var requestData = {
                Content: message,
                CaseId: CaseId
            };

            $.ajax({
                url: '/CaseComment/CreateCaseComment',
                method: 'POST',
                data: requestData,
                success: function (response) {
                    console.log(response);
                    $('#messageinput').val('');
                    var chatMessages = $('.direct-chat-messages');
                    var scrollHeight = chatMessages[0].scrollHeight;
                    chatMessages.scrollTop(scrollHeight);
                },
                error: function () {
                    console.log('Error while sending the message.');
                }
            });
        }

        $('#SendButton').click(function (e) {
            e.preventDefault();
            var message = $('input[name="message"]').val();
            if (message.trim() !== '') {
                // Send the message
                sendMessage(message, CaseId);
                location.reload();
                $('.nav-tabs a[href="#custom-tabs-four-settings"]').tab('show');
                // loadComments();
                var chatMessages = $('.direct-chat-messages');
                var scrollHeight = chatMessages[0].scrollHeight;
                chatMessages.scrollTop(scrollHeight);
            }
        });
        function loadCollaterals() {

            $.ajax({
                url: '/Collateral/GetCMCollaterals?CaseId=' + CaseId,
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    if ($.fn.DataTable.isDataTable('#caseCollaterals')) {
                        var caseCollateralsTable = $('#caseCollaterals').DataTable();
                        caseCollateralsTable.destroy();
                    }
                    initializeDataTable(data);
                },
                error: function (error) {
                    toastr.error("Failed to load collaterals");
                    console.log(error);
                }
            });
        }

        $('#assignForm').submit(function (e) {
            e.preventDefault();

            var formData = new FormData(this);

            $.ajax({
                url: '/CTLCase/AssignCheckerOfficer',
                type: 'POST',
                data: formData,
                processData: false,
                contentType: false,
                success: function (response) {
                    toastr.success(response.message);
                    loadCollaterals();
                    $('#assignModal').modal('hide');
                },
                error: function (error) {
                    toastr.error("Unable to assign collateral");
                    console.log(error);
                }
            });
        });
        loadCollaterals();
    });
</script>
