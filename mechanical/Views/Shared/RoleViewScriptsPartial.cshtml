<script src="~/lib/datatable/js/jquery.datatables.min.js"></script>
<script src="~/lib/datatable/js/datatables.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/datatables.responsive.min.js"></script>
<script src="~/lib/datatable/js/responsive.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/datatables.buttons.min.js"></script>
<script src="~/lib/datatable/js/buttons.bootstrap4.min.js"></script>
<script src="~/lib/datatable/js/jszip.min.js"></script>
<script src="~/lib/datatable/js/pdfmake.min.js"></script>
<script src="~/lib/datatable/js/vfs_fonts.js"></script>
<script src="~/lib/datatable/js/buttons.html5.min.js"></script>
<script src="~/lib/datatable/js/buttons.print.min.js"></script>
<script src="~/lib/datatable/js/buttons.colvis.min.js"></script>




<script>

     function sanitizeAndValidateInput(input) {
         console.log("sthjjjjjjjjjjjjjjjjjjjr first" + input);
        if (typeof input !== 'string') {
            return ''; // Return an empty string for non-string input
        }

        // Define a regex for valid characters (alphanumeric and spaces)
        const validRegex = /^[a-zA-Z0-9\s]*$/;
        console.log("sthjjjjjjjjjjjjjjjjjjjr middle" + input);
        // Check if the input matches the regex
        if (!validRegex.test(input)) {
            return ''; // Return an empty string if invalid
        }
        console.log("sthjjjr after" + input);
        
        
        return input; // Return the sanitized string
    }
    $(document).ready(function () {
            
       
        

            $.ajax({
        url: '/UserManagment/GetRoles',
        type: 'GET',
        dataType: 'json',
        headers: {
            'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
        },
        success: function (data) {
            $('#example1').DataTable({
                data: data,
                columns: [
                    {
                        data: 'Name',
                        title: 'Name',
                        render: $.fn.dataTable.render.text() // Auto-escapes HTML
                    },
                    {
                        data: null,
                        render: function (data, type, row) {
                            // Secure URL construction using encoded values
                            var SanitizedRoleId = sanitizeAndValidateInput(data.RoleId);
                            var SanitizedName = sanitizeAndValidateInput(data.Name);

                            Console.log("sthjjjjjjjjjjjjjjjjjjjr function" + SanitizedRoleId);
                            const editUrl = encodeURI(`/RoleManagment/edit/${SanitizedRoleId}`);
                            const deleteUrl = encodeURI(`/RoleManagment/delete/${SanitizedRoleId}`);

                            // Secure button construction
                            return `
                                <a href="${editUrl}"
                                   class="edit-btn btn btn-primary"
                                   data-id="${SanitizedRoleId}"
                                   data-role-name="${escapeHtml(SanitizedName)}">
                                   Edit
                                </a>
                                <button class="delete-btn btn btn-danger"
                                        data-id="${SanitizedRoleId}"
                                        data-role-name="${escapeHtml(SanitizedName)}"
                                        onclick="confirmDeleteRole(this)">
                                    Delete
                                </button>
                            `;
                        }
                    }
                ],
                responsive: true,
                lengthChange: false,
                autoWidth: false,
                dom: 'Bfrtip',
                buttons: [
                    {
                        extend: 'copy',
                        exportOptions: { columns: [0] } // Only export name column
                    },
                    {
                        extend: 'csv',
                        exportOptions: { columns: [0] }
                    },
                    // Other buttons...
                ]
            });
        }
    });

    // HTML escaping function
    function escapeHtml(unsafe) {
        return unsafe?.toString()
            .replace(/&/g, "&amp;")
            .replace(/</g, "&lt;")
            .replace(/>/g, "&gt;")
            .replace(/"/g, "&quot;")
            .replace(/'/g, "&#039;") || '';
    }

    // Secure delete confirmation
    function confirmDeleteRole(button) {
        const roleId = button.dataset.id;
        const roleName = button.dataset.roleName;

        if (confirm(`Are you sure you want to delete ${roleName}?`)) {
            deleteRole(roleId);
        }
    }

    // Secure delete operation
    function deleteRole(roleId) {
        fetch(`/RoleManagment/Delete`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
            },
            body: JSON.stringify({ id: roleId })
        })
        .then(response => {
            if (response.ok) {
                window.location.reload();
            } else {
                alert('Failed to delete role');
            }
        })
        .catch(error => console.error('Error:', error));
    }
        // Edit button click event
        $('#example1').on('click', '.edit-btn', function () {
            var userId = $(this).data('id');
            // Perform edit operation for the selected user
            // ...
        });

        // Delete button click event
        $('#example1').on('click', '.delete-btn', function () {
            var userId = $(this).data('id');
            // Perform delete operation for the selected user
            // ...
        });
    });
</script>