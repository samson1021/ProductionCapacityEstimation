<<script>
     $(document).ready(function () {
         var TaskId;
         var chatMessages;
         var errorMessage = $('#error-message'); // Reference to the error message container
        
         $('#custom-tabs-four-settings-tab').click(function (e) {
             chatMessages = $('.direct-chat-messages');
             e.preventDefault(); // Prevent default anchor click behavior
             TaskId = $('#TaskId').val(); // Retrieve TaskId from the hidden input
             errorMessage.hide();             
             $('#messageinput').val(''); // Clear input field            
             loadComments(); // Load comments when the tab is clicked
         });
         // Handle Send Button click
         $('#SendButton').click(function (e) {
             e.preventDefault(); // Prevent default form submission
             sendMessage(); // Function to send the message            
             $('#messageinput').val(''); // Clear the input field after sending
         });
         // Function to load comments
         function loadComments() {            
             $.ajax({
                 url: `/TaskManagment/GetTaskComment?TaskId=${TaskId}`,
                 method: 'GET',
                 success: function (data) {
                     if (data && data.comments) { // Check if data and Comments exist
                         updateChatMessages(data); // Update the chat messages
                         updateContactList(data);   // Update the contact list
                     } else {
                         console.log('No comments found or data structure is incorrect.');
                     }
                 },
                 error: function (jqXHR, textStatus, errorThrown) {
                     console.log('An error occurred while retrieving task comments:', textStatus, errorThrown);
                     alert('Failed to load comments. Please try again later.'); // User feedback
                 }
             });
         }
         function sendMessage() {
             var Comment = $('#messageinput').val().trim();
             var errorMessage = $('#error-message'); // Reference to the error message container

             // Clear previous error message
             errorMessage.hide();

             // Check if the comment is empty
             if (Comment === "") {
                 // Show error message in the UI
                 errorMessage.text("Message cannot be empty.").show();
                 return; // Exit the function if the comment is empty
             }

             var requestData = {
                 Comment: Comment,
                 TaskId: TaskId,
             };

             $.ajax({
                 url: '/TaskManagment/CommentTask',
                 method: 'POST',
                 contentType: 'application/json',
                 data: JSON.stringify(requestData),
                 success: function (response) {
                     $('#messageinput').val(''); // Clear the input field after sending
                     loadComments(); // Reload the comments
                     console.log('Message sent successfully:', response);
                    },
                 error: function (jqXHR, textStatus, errorThrown) {
                     console.log('Error while sending the message:', textStatus, errorThrown);
                     alert('Failed to send message. Please try again later.'); // User feedback
                 }
             });

             return false; // Prevent default form submission
         }
         function updateChatMessages(data) {
             var currentUserID = data.userId;
             var Comments = data.comments || []; // Ensure Comments is an array
             $(".CommentBage").text(Comments.length); // Update comment count
             chatMessages.empty(); // Clear previous messages

             if (Comments.length > 0) {
                 let lastDate = '';
                 Comments.forEach(function (comment) {
                     var createdAt = new Date(comment.CommentDate);
                     var options = { year: 'numeric', month: 'long', day: 'numeric' };
                     var formattedDate = createdAt.toLocaleDateString('en-US', options);

                     // Check if the date has changed
                     if (formattedDate !== lastDate) {
                         chatMessages.append($('<div>').addClass('chat-date').text(formattedDate));
                         lastDate = formattedDate;
                     }

                     var chatMsg = createChatMessage(comment, currentUserID);
                     chatMessages.append(chatMsg);
                 });
             } else {
                 chatMessages.append('<div class="no-comments-msg">No comments available for this task.</div>');
             }

             scrollToBottom(); // Scroll to the bottom of chat
         }
         function createChatMessage(comment, currentUserID) {
             var chatMsg = $('<div>').addClass('direct-chat-msg');
             var chatInfos = $('<div>').addClass('direct-chat-infos clearfix');

            // Create user profile link
             var chatName = $('<a>')
                 .attr('href', `/UserManagment/Profile/${comment.UserId}`)
                 .text(comment.User?.Name || 'Unknown User'); // Fallback for missing user name

             var chatText = $('<div>').addClass('direct-chat-text').text(comment.Comment || ''); // Fallback for empty comment
             var createdAt = new Date(comment.CommentDate);

             // Format timestamp
             var chatTimestamp = $('<span>').addClass('direct-chat-timestamp')
                 .text(createdAt.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }));

             chatInfos.append(chatName); // Name at the top
             chatMsg.append(chatInfos, chatText, chatTimestamp); // Append timestamp last

             // Add class for current user's messages
             if (comment.UserId === currentUserID) {
                 chatMsg.addClass('right');
             }

             return chatMsg;
         }
         function updateContactList(data) {
             var users = data.comments.map(comment => ({
                 id: comment.UserId,
                 name: comment.User?.Name || 'Unknown User', // Fallback if name is not available
                 avatar: '/img/avatar5.png', // Placeholder avatar
                 lastMessage: comment.Comment || '', // Fallback for empty comment
                 date: new Date(comment.CommentDate).toLocaleString([], { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' }) // Format date
             }));

             populateContactList(users); // Populate the contact list with users
         }
         function populateContactList(users) {
             var contactList = $('.contacts-list');
             contactList.empty(); // Clear existing contacts

             if (users.length === 0) {
                 contactList.append('<li>No contacts available.</li>'); // Message if no users are found
                 return;
             }

             users.forEach(function (user) {
                 // Create list item for each user
                 var listItem = $('<li>').append(
                     $('<a>').attr('href', `/UserManagment/Profile/${user.id}`)
                         .append($('<img>').addClass('contacts-list-img').attr('src', user.avatar || '/img/default-avatar.png')) // Default avatar
                         .append($('<div>').addClass('contacts-list-info')
                             .append($('<span>').addClass('contacts-list-name').text(user.name || 'Unknown User')) // Fallback for name
                             .append($('<small>').addClass('contacts-list-date float-right').text(formatDate(user.date))) // Format date
                             .append($('<span>').addClass('contacts-list-msg').text(user.lastMessage || '')) // Fallback for last message
                         )
                 );
                 contactList.append(listItem); // Append the list item to the contact list
             });
         }
         function scrollToBottom() {
             if (chatMessages && chatMessages.length) {
                 chatMessages.animate({ scrollTop: chatMessages.prop('scrollHeight') }, 300); // Smooth scroll to bottom
             }
         }
         function formatDate(date) {
             var options = { year: 'numeric', month: 'long', day: 'numeric', hour: 'numeric', minute: 'numeric', hour12: true };
             return date.toLocaleString('en-KE', options); // Change locale to Kenya
         }

     });
    
 </script>

<style>
    .direct-chat-messages {
        max-height: 50vh;
        overflow-y: auto;
        padding: 2%;
    }

    .direct-chat-msg {
        max-width: 75%;
        margin-bottom: 1.25rem;
        border-radius: 0.625rem;
        padding: 1rem;
        word-wrap: break-word;
        display: flex;
        flex-direction: column;
        position: relative;
        background-color: #f9f9f9;
        box-shadow: 0 0.125rem 0.3125rem rgba(0, 0, 0, 0.1);
        overflow-wrap: break-word;
        min-height: 2.5rem;
        width: fit-content;
    }

        .direct-chat-msg.right {
            margin-left: auto;
            background-color: #e6f7ff;
        }

        .direct-chat-msg:not(.right) {
            background-color: #f1f1f1;
        }

    .direct-chat-text {
        white-space: pre-wrap;
        margin-bottom: 1.25rem;
        display: inline-block;
    }

    .direct-chat-infos {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        ;
    }

    .direct-chat-timestamp {
        position: absolute;
        right: 0.625rem;
        bottom: 0.3125rem;
        color: #888888;
        font-size: 0.8rem;
        margin-left: auto;
        margin-top: 0.3125rem;
        font-style: italic;
        display: block;
    }

    .chat-date {
        text-align: center;
        margin: 2% auto;
        color: #333;
        font-weight: bold;
        font-size: 1rem;
        padding: 0.5rem 1rem;
        letter-spacing: 0.05rem;
        background-color: #f9f9f9;
        border: none;
        width: fit-content;
        border-radius: 1rem;
        display: block;
        box-shadow: 0 0.125rem 0.3125rem rgba(0, 0, 0, 0.1), 0 0.25rem 0 rgba(0, 0, 0, 0.1);
    }

    .SendButton {
        margin-top: 10px;
        padding: 10px;
        background-color: #4CAF50;
        color: white;
        border: none;
        cursor: pointer;
        font-size: 16px;
        border-radius: 5px;
    }
</style>