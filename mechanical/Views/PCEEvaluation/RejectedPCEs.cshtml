﻿@{
    ViewData["Title"] = ViewBag.Title as string;
    var EmptyMessage = "There are no Rejected PCEs found";
    var FetchUrl = "/PCEEvaluation/GetMyRejectedPCEs";
}

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6">
                <h4>@ViewData["Title"]</h4>
            </div>
            <div class="col-sm-6">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("MyPCECases", "PCEEvaluation")">My PCE Cases</a></li>
                    <li class="breadcrumb-item"><a href="@Url.Action("MyPCEs", "PCEEvaluation")">My PCE Evaluations</a></li>
                    <li class="breadcrumb-item active">@ViewData["Title"]</li>
                </ol>
            </div>
        </div>
    </div>
</section>
<section class="content">
    <div class="container-fluid">
        @await Html.PartialAsync("Partial/_PCEsTable")
    </div>
</section>

@section Scripts {

    @{
        await Html.RenderPartialAsync("ScriptPartial/_CommonLibrariesScriptPartial");
        await Html.RenderPartialAsync("ScriptPartial/_ValidationScriptsPartial");
    }
    <script>
        $(document).ready(function () {

            function initializeDataTable(data) {

                PCEsTable = $('#PCEs').DataTable({
                    language: {
                        emptyTable: '@EmptyMessage'
                    },
                    responsive: true,
                    pageLength: 8,
                    lengthChange: false,
                    autoWidth: false,
                    buttons: ["copy", "csv", "excel", { extend: 'pdf', title: 'My PCE Case - pdf' }, { extend: 'print', title: 'My PCE Case - Print' }, "colvis"],
                    data: data,
                    columns: [
                        {
                            data: null,
                            render: function (data, type, row, meta) {
                                return '<input class="purple-checkbox" type="checkbox" value="' + data.Id + '">';
                            }
                        },
                        { data: 'PropertyOwner', width: '25%' },
                        { data: 'Role', width: '25%' },
                        { data: 'ProductionType', width: '35%' },
                        {
                            data: 'Id',
                            width: '10%',
                            render: function (data, type, row, meta) {
                                var detailUrl = '@Url.Action("Detail", "ProductionCapcity")';
                                return '<a href="' + detailUrl + '?Id=' + data + '">Details</a>';
                            }
                        }
                    ]
                }).buttons().container().appendTo('#PCEs_wrapper .col-md-6:eq(0)');
            }
            function loadPCEs() {
                $.ajax({
                    url: '@FetchUrl',
                    type: 'GET',
                    dataType: 'json',
                    success: function (data) {
                        if ($.fn.DataTable.isDataTable('#PCEs')) {
                            var PCEsTable = $('#PCEs').DataTable();
                            PCEsTable.destroy();
                        }
                        initializeDataTable(data);
                    },
                    error: function (error) {
                        toastr.error("Failed to load Production Capacities");
                        console.log(error);
                    }
                });
            }
            loadPCEs();
        });
    </script>
}