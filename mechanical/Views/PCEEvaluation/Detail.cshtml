@using mechanical.Models.PCE.Dto.PCEEvaluationDto
@using mechanical.Models.PCE.Enum.PCEEvaluation
@using mechanical.Models.PCE.Dto.PCECaseDto
@using mechanical.Models.Dto.UploadFileDto
@model mechanical.Models.PCE.Dto.PCEEvaluationDto.PCEEvaluationReturnDto

@{
    ViewData["Title"] = ViewBag.Title ?? "PCE Case";    
    var myPCECase = ViewData["PCECase"] as PCECaseReturntDto;
    var RejectPost = new PCERejectPostDto {
            PCEId = Model.PCEId, 
            RejectionComment = "" 
    }; 
    ViewData["RejectPost"] = RejectPost; 
}

<section class="content-header">
    <div class="container-fluid">
        <div class="row mb-2">
            <div class="col-sm-6 col-xl-4">
                <div class="row align-items-center">
                   
                    <div class="col-auto">
                        <h5>
                            @if (Model.Status != null)
                            {
                                <span id="status-badge" class="badge badge-lg badge-pill badge-primary">@Model.Status</span>
                            }
                            else
                            {
                                <span id="status-badge" class="badge badge-lg badge-pill badge-secondary">Unknown</span>
                            }
                        </h5>
                    </div>
                </div>
            </div>
            <div class="col-sm-6 col-xl-4">
                <h4 class="m-0">PCE Evaluation Detail</h4>
            </div>
            <div class="col-sm-6 col-xl-4">
                <ol class="breadcrumb float-sm-right">
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "Home")">Home</a></li>
                    <li class="breadcrumb-item active">My Case</li>
                    <li class="breadcrumb-item"><a href="@Url.Action("Index", "PCE")">PCE Evaluations</a></li>
                    <li class="breadcrumb-item active">Detail</li>
                </ol>
            </div>
        </div>
    </div>
</section>

<section class="content">
    <div class="container-fluid">     
        <div class="row">
            <!-- General Information -->
            <div class="col-md-6">
                <div class="card card-purple bg-light">
                    <div class="card-header bg-purple text-white">
                        <h3 class="card-title">General Information</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.ProductionLineOrEquipmentName)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.ProductionLineOrEquipmentName)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.OutputPhase)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.OutputPhase)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.OriginCountry)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.OriginCountry)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.WorkingDaysPerMonth)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.WorkingDaysPerMonth)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.EffectiveProductionHourType)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.EffectiveProductionHourType)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.EffectiveProductionHour)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.EffectiveProductionHour)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.ShiftsPerDay)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.ShiftsPerDay)</h6></dd>
                        </dl>
                    </div>
                </div>
                <div class="card bg-light mt-4">
                    <div class="card-header bg-purple text-white">
                        <h3 class="card-title">Shift Hours</h3>
                    </div>
                    <div class="card-body">
                        @if (Model.ShiftHours != null && Model.ShiftHours.Any())
                        {
                            <table class="table table-striped table-hover">
                                <thead>
                                    <tr>
                                        <th>Start Time</th>
                                        <th>End Time</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var shift in Model.ShiftHours)
                                    {
                                        <tr>
                                            <td>@shift.Start.ToString("hh:mm tt")</td>
                                            <td>@shift.End.ToString("hh:mm tt")</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p>No shift hours available.</p>
                        }
                    </div>
                </div>
                
                <!-- Inspection Information -->
                <div class="card bg-light">
                    <div class="card-header bg-purple text-white">
                        <h3 class="card-title">Inspection Information</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.Status)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.Status)</h6></dd>

                            <dt class="col-sm-6">Inspection Started At</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.TimeConsumedToCheck.Start, new { @class = "datetime-format" })</h6></dd>

                            <dt class="col-sm-6">Inspection Ended At</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.TimeConsumedToCheck.End, new { @class = "datetime-format" })</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.InspectionPlace)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.InspectionPlace)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.InspectionDate)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.InspectionDate)</h6></dd>
                        </dl>
                    </div>
                </div>
            </div>

            <!-- Capacity Information -->
            <div class="col-md-6">
                <div class="card card-purple bg-light">
                    <div class="card-header bg-purple text-white">
                        <h3 class="card-title">Capacity Information</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.DesignProductionCapacity)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.DesignProductionCapacity)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.AttainableProductionCapacity)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.AttainableProductionCapacity)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.ActualProductionCapacity)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.ActualProductionCapacity)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.EstimatedProductionCapacity)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.EstimatedProductionCapacity)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.BottleneckProductionLineCapacity)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.BottleneckProductionLineCapacity)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.OverallActualCurrentPlantCapacity)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.OverallActualCurrentPlantCapacity)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.ProductionUnit)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.ProductionUnit)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.ProductionMeasurement)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.ProductionMeasurement)</h6></dd>
                        </dl>
                    </div>
                </div>

                <!-- Additional Information -->
                <div class="card card-purple bg-light">
                    <div class="card-header bg-purple text-white">
                        <h3 class="card-title">Additional Information</h3>
                    </div>
                    <div class="card-body">
                        <dl class="row">
                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.TechnicalObsolescenceStatus)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.TechnicalObsolescenceStatus)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.DepreciationRateApplied)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.DepreciationRateApplied)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.FactorsAffectingProductionCapacity)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.FactorsAffectingProductionCapacity)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.Discrepancies)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.Discrepancies)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.MachineFunctionalityStatus)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.MachineFunctionalityStatus)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.MachineNonFunctionalityReason)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.MachineNonFunctionalityReason)</h6></dd>

                            <dt class="col-sm-6">@Html.DisplayNameFor(model => model.OtherMachineNonFunctionalityReason)</dt>
                            <dd class="col-sm-6"><h6>@Html.DisplayFor(model => model.OtherMachineNonFunctionalityReason)</h6></dd>
                        </dl>
                    </div>
                </div>
            </div>
        
            <div class="card card-purple bg-light">
                <div class="card-header bg-purple text-white">
                    <h3 class="card-title">Supporting Documents</h3>
                </div>
                <div class="card-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>File Name</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                if (Model.SupportingEvidences == null || !Model.SupportingEvidences.Any())
                                {
                                    <tr>
                                        <td colspan="2">There is no Supporting Evidence related to this PCE Evaluation</td>
                                    </tr>
                                }
                                else
                                {
                                    foreach (var file in Model.SupportingEvidences)
                                    {
                                        <tr>
                                            <td>@file.Name</td>
                                            <td>@file.Name</td><a href="@Url.Action("ViewFile", "UploadFile", new { id = file.Id })" class="btn btn-sm btn-info">View</a>
                                            <td><a href="@Url.Action("DownloadFile", "UploadFile", new { id = file.Id })">Download <i class="fas fas-solid fa-download"></i></a></td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="card card-purple bg-light">
                <div class="card-header bg-purple text-white">
                    <h3 class="card-title">Production Process Flow Diagrams</h3>
                </div>
                <div class="card-body">
                    <table class="table table-bordered">
                        <thead>
                            <tr>
                                <th>File Name</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @{
                                if (Model.ProductionProcessFlowDiagrams == null || !Model.ProductionProcessFlowDiagrams.Any())
                                {
                                    <tr>
                                        <td colspan="2">There is no Production Process Flow Diagram related to this PCE Evaluation</td>
                                    </tr>
                                }
                                else
                                {
                                    foreach (var file in Model.ProductionProcessFlowDiagrams)
                                    {
                                        <tr>
                                            <td>@file.Name</td><a href="@Url.Action("ViewFile", "UploadFile", new { id = file.Id })" class="btn btn-sm btn-info">View</a>
                                            <td><a href="@Url.Action("DownloadFile", "UploadFile", new { id = file.Id })">Download <i class="fas fas-solid fa-download"></i></a></td>
                                        </tr>
                                    }
                                }
                            }
                        </tbody>
                    </table>
                </div>
            </div>
            <div class="row my-4">
                <div class="col-3 col-md-4 offset-md-1">
                    <div class="card bg-light shadow-sm">
                        <div class="card-body">
                            <div class="row align-items-center">
                                <div class="col-4">
                                    <h6 class="mb-0 font-weight-bold">Status:</h6>
                                </div>
                                <div class="col-8 text-right">
                                    <h5 class="mb-0">
                                        @if (Model.Status != null)
                                        {
                                            <span id="status-badge" class="badge badge-pill badge-primary">@Model.Status</span>
                                        }
                                        else
                                        {
                                            <span id="status-badge" class="badge badge-pill badge-secondary">Unknown</span>
                                        }
                                    </h5>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="row col-12">
            <div style="margin-top:1.25rem;margin-bottom:1.25rem;margin-left:1.25rem;" class="col-2">
                @using (Html.BeginForm("Update", "PCEEvaluation", new {Id = Model.Id}, FormMethod.Get))
                {
                <input asp-for="PCEId" value=@Model.PCEId type="hidden" />
                <div class="row">
                    <button id="update-btn" type="submit" class="col-xl-12 btn btn-sm btn-info"><i class="fas fa-pen"></i>Update </button>
                </div>
                }
            </div>
            <div style="margin-top:1.25rem;margin-bottom:1.25rem;" class="col-1"></div>
            <div style="margin-top:1.25rem;margin-bottom:1.25rem;" class="col-2">
                @using (Html.BeginForm("Delete", "PCEEvaluation", new {Id = Model.Id}, FormMethod.Get))
                {
                <input asp-for="PCEId" value=@Model.PCEId type="hidden" />
                <div class="row">
                    <button id="delete-btn" type="submit" class="col-xl-12 btn btn-sm btn-dark"><i class="fas fa-trash"></i>Delete </button>
                </div>
                }
            </div>
            <div style="margin-top:1.25rem;margin-bottom:1.25rem;" class="col-1"></div>
            <div style="margin-top:1.25rem;margin-bottom:1.25rem;" class="col-2">
                <div class="row">
                    <button id="reject-btn"  type="button" class="col-xl-12 btn btn-sm btn-danger" data-toggle="modal" data-target="#rejectionModal1">  <i class="fas fa-undo"></i>Return</button>
                </div>  
            </div>
            <div style="margin-top:1.25rem;margin-bottom:1.25rem;" class="col-1"></div>
            <div style="margin-top:1.25rem;margin-bottom:1.25rem; margin-left:2.5rem;" class="col-2">
                @using (Html.BeginForm("SendToRM", "PCEEvaluation", new {Id = Model.Id}, FormMethod.Get))
                {
                <input asp-for="PCEId" value=@Model.PCEId type="hidden" />
                <div class="row">
                    <button id="send-to-rm-btn" type="submit" class="col-xl-12 btn btn-sm btn-success"><i class="fas fa-paper-plane"></i>Send To RM </button>
                </div>
                }
            </div>            
        </div>      
    </div>              
</section>
 
  
@section Scripts {
    @{
        await Html.RenderPartialAsync("ScriptPartial/_ValidationScriptsPartial"); 
        await Html.RenderPartialAsync("Partial/_RejectModal", ViewData["RejectPost"]);
    } 

    <script>
        // formatAndDisplayValue('CollateralEstimationFee');
    </script>
    <script>
        function formatAndDisplayValue(elementId) {
            var element = document.getElementById(elementId);
            var value = parseFloat(element.textContent);
            var formattedValue = formatNumber(value);
            element.textContent = formattedValue;
        }
    </script>
 
    <script>
        document.addEventListener("DOMContentLoaded", function() {
            var statusBadge = document.getElementById("status-badge");
            var status = "@Model.Status";

            function getStatusClass(status) {
                switch (status) {
                    case "New":
                        return "badge-primary";
                    case "Evaluated":
                        return "badge-success";
                    case "Pending":
                        return "badge-warning";
                    case "Reevaluated":
                        return "badge-info";
                    case "Rejected":
                        return "badge-danger";
                    case "Closed":
                        return "badge-dark";
                    default:
                        return "badge-secondary";
                }
            }

            function updateButtons(status) {
                var updateBtn = document.getElementById("update-btn");
                var deteleBtn = document.getElementById("delete-btn");
                var rejectBtn = document.getElementById("reject-btn");
                var sendToRMBtn = document.getElementById("send-to-rm-btn");

                switch (status) {
                    case "New":
                        updateBtn.style.display = "inline-block";
                        deteleBtn.style.display = "inline-block";
                        rejectBtn.style.display = "inline-block";
                        sendToRMBtn.style.display = "inline-block";
                        break;
                    case "Evaluated":
                        updateBtn.style.display = "inline-block";
                        deteleBtn.style.display = "none";
                        rejectBtn.style.display = "none";
                        sendToRMBtn.style.display = "inline-block";
                        break;
                    case "Pending":
                        updateBtn.style.display = "inline-block";
                        deteleBtn.style.display = "inline-block";
                        rejectBtn.style.display = "inline-block";
                        sendToRMBtn.style.display = "none";
                        break;
                    case "Reevaluated":
                        updateBtn.style.display = "inline-block";
                        deteleBtn.style.display = "none";
                        rejectBtn.style.display = "none";
                        sendToRMBtn.style.display = "inline-block";
                        break;
                    case "Rejected":
                        updateBtn.style.display = "inline-block";
                        deteleBtn.style.display = "inline-block";
                        rejectBtn.style.display = "none";
                        sendToRMBtn.style.display = "none";
                        break;
                    case "Closed":
                        updateBtn.style.display = "none";
                        deteleBtn.style.display = "inline-block";
                        rejectBtn.style.display = "inline-block";
                        sendToRMBtn.style.display = "none";
                        break;
                    default:
                        updateBtn.style.display = "none";
                        deteleBtn.style.display = "inline-block";
                        rejectBtn.style.display = "inline-block";
                        sendToRMBtn.style.display = "none";
                        break;
                }
            }

            if (status) {
                statusBadge.classList.add(getStatusClass(status));
                updateButtons(status);
            }
        });
    </script>
}