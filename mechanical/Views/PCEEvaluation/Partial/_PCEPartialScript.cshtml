@using mechanical.Models.PCE.Enum.PCEEvaluation

<script>

    var shiftHoursContainer = $('#shiftHoursContainer');
    $(document).ready(function () {
       
        $('#ShiftsPerDay').attr({
            "min": 1,
            "max": 5
        }).on('input', function () {
            if ($(this).val()) {
                renderShiftHours();
            }
        });

        if ($('#ShiftsPerDay').val()) {
            renderShiftHours();
        }

        $("#MachineFunctionalityStatus").change(function () {
            var selectedStatus = $(this).val();
            if (selectedStatus === '@((int)MachineFunctionalityStatus.NotFunctional)') {
                $("#functionalityReasonRow").show();
            } else {
                $("#functionalityReasonRow").hide();
                $("#otherReasonRow").hide();
            }
        });

        $("#MachineNonFunctionalityReason").change(function () {
            var selectedReason = $(this).val();
            if (selectedReason === '@((int)MachineNonFunctionalityReason.Other)') {
                $("#otherReasonRow").show();
            } else {
                $("#otherReasonRow").hide();
            }
        });

        document.getElementById("OutputPhase").addEventListener("change", function () {
            handleDropdownChange(this, "OtherOutputPhase");
        });
    });
        
    function setDefaultTime() {
        var now = new Date();
        var hours = String(now.getHours()).padStart(2, '0');
        var minutes = String(now.getMinutes()).padStart(2, '0');
        var currentTime = hours + ':' + minutes;

        $('#shiftHoursContainer .shift-hour').each(function() {
            $(this).find('input[type="time"]').each(function() {
                if (!$(this).val()) { // Only set if no value is present
                    $(this).val(currentTime);
                }
            });
        });
    }

    function reindexShiftHours() {
        $('#shiftHoursContainer .shift-hour').each(function (index) {
            $(this).attr('data-index', index);
            $(this).find('label').each(function () {
                $(this).text($(this).text().replace(/Shift \d+/, `Shift ${index + 1}`));
            });
            $(this).find('input').each(function () {
                $(this).attr('name', $(this).attr('name').replace(/\d+/, index));
            });
        });
    }

    function renderShiftHours() {
        var shiftCount = Math.max(1, Math.min(5, parseInt($('#ShiftsPerDay').val()) || 0));
        var existingShiftCount = shiftHoursContainer.children('.shift-hour').length;

        // Add new shifts if needed
        for (var i = existingShiftCount; i < shiftCount; i++) {
            shiftHoursContainer.append(createShiftHourRow(i));
        }

        // Remove excess shifts if needed
        if (shiftCount < existingShiftCount) {
            shiftHoursContainer.children('.shift-hour').slice(shiftCount).remove();
        }

        // Reindex shift hours
        reindexShiftHours();
        setDefaultTime();
    }

    function createShiftHourRow(index) {
        return `
            <div class="row shift-hour col-sm-12" data-index="${index}">
                <div class="form-group col-sm-6">
                    <label>Shift ${index + 1} Start <i class="text-danger">*</i></label>
                    <input name="ShiftHours[${index}].Start" class="form-control form-control-sm" type="time" />
                    <span class="text-danger"></span>
                </div>
                <div class="form-group col-sm-6">
                    <label>Shift ${index + 1} End <i class="text-danger">*</i></label>
                    <input name="ShiftHours[${index}].End" class="form-control form-control-sm" type="time" />
                    <span class="text-danger"></span>
                </div>
            </div>
        `;
    }

    function handleButtonClick(buttonId, confirmMessage, successMessage, redirectUrl) {
        document.getElementById(buttonId).addEventListener("click", function(event) {
            event.preventDefault();
            
            if (!confirm(confirmMessage)) {
                return;
            }

            fetch(this.href, {
                method: 'GET',
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    toastr.success(successMessage);
                    setTimeout(function() {
                        window.location.href = redirectUrl;
                    }, 1000);
                } else {
                    toastr.error('Error: ' + data.error);
                }
            })
            .catch(error => {
                toastr.error('Error: ' + error);
            });
        });
    }

    // Alphanumeric validation
    function addAlphanumericValidation(elementId, errorElementId) {
        document.getElementById(elementId).addEventListener("input", function () {
            var input = this.value;
            var alphanumericRegex = /^[A-Za-z0-9]+$/;
            if (!alphanumericRegex.test(input)) {
                this.setCustomValidity("Only alphanumeric characters are allowed.");
                document.getElementById(errorElementId).textContent = "Only alphanumeric characters are allowed.";
            } else {
                this.setCustomValidity("");
                document.getElementById(errorElementId).textContent = "";
            }
        });
    }
    // addAlphanumericValidation("ProductionLineOrEquipmentName", "ProductionLineOrEquipmentName-error");
    // addAlphanumericValidation("OutputType", "OutputType-error");

    // Function for handling dropdown value changes
    function handleDropdownChange(selectElement, otherInputId) {
        var otherInput = document.getElementById(otherInputId);
        if (selectElement.value === "Other") {
            otherInput.style.display = "block";
            otherInput.setAttribute("required", "required");
        } else {
            otherInput.style.display = "none";
            otherInput.removeAttribute("required");
        }
    }    

    function deleteFile(fileId, event) {
        event.preventDefault();

        if (confirm("Are you sure you want to delete this file?")) {
            // Add the fileId to the hidden input for deleted files
            var deletedFileIdsInput = document.getElementById('DeletedFileIds');
            var deletedFileIds = deletedFileIdsInput.value ? deletedFileIdsInput.value.split(',') : [];
            deletedFileIds.push(fileId);
            deletedFileIdsInput.value = deletedFileIds.join(',');

            // Remove the file row from the view
            $(`#file-${fileId}`).remove();

            // Check if there are no more files and add the appropriate message
            if ($("#file-list1 .file-row").length == 0) {
                $("#file-list1").append('<tr id="no-evidence" class="text-center file-row" data-file-id="0"><td colspan="2"><h6>No supporting evidence</h6></td></tr>');
            }
            if ($("#file-list2 .file-row").length == 0) {
                $("#file-list2").append('<tr id="no-diagram" class="text-center file-row" data-file-id="0"><td colspan="2"><h6>No production process flow diagram</h6></td></tr>');
            }
        }
    }

    function adjustButtonPositions() {
        var buttons = document.querySelectorAll('.action-btn');
        var visibleButtons = Array.from(buttons).filter(btn => btn.style.display !== 'none');

        if (visibleButtons.length === 2) {
            visibleButtons[0].classList.add('align-left');
            visibleButtons[1].classList.add('align-right');
        } else if (visibleButtons.length === 3) {
            visibleButtons[0].classList.add('align-left');
            visibleButtons[1].classList.add('align-center');
            visibleButtons[2].classList.add('align-right');
        } else {
            visibleButtons.forEach(btn => {
                btn.classList.remove('align-left', 'align-center', 'align-right');
            });
        }
    }

    function updateButtons(status) {
        var updateBtn = document.getElementById("update-btn");
        var deleteBtn = document.getElementById("delete-btn");
        var rejectBtn = document.getElementById("reject-btn");
        var evaluateBtn = document.getElementById("evaluate-btn");

        switch (status) {
            case "Pending":
                updateBtn.style.display = "inline-block";
                deleteBtn.style.display = "inline-block";
                rejectBtn.style.display = "inline-block";
                evaluateBtn.style.display = "inline-block";
                break;
            case "Evaluated":
                updateBtn.style.display = "none";
                deleteBtn.style.display = "none";
                rejectBtn.style.display = "none";
                evaluateBtn.style.display = "none";
                break;
            case "Reevaluated":
                updateBtn.style.display = "none";
                deleteBtn.style.display = "none";
                rejectBtn.style.display = "none";
                evaluateBtn.style.display = "none";
                break;
            case "Rejected":
                updateBtn.style.display = "inline-block";
                deleteBtn.style.display = "inline-block";
                rejectBtn.style.display = "none";
                evaluateBtn.style.display = "none";
                break;
            case "Rework":
                updateBtn.style.display = "inline-block";
                deleteBtn.style.display = "inline-block";
                rejectBtn.style.display = "inline-block";
                evaluateBtn.style.display = "inline-block";
                break;
            default:
                updateBtn.style.display = "none";
                deleteBtn.style.display = "none";
                rejectBtn.style.display = "none";
                evaluateBtn.style.display = "none";
                break;
        }
        adjustButtonPositions();
    }
</script>

<style>
    .align-left {
        float: left;
    }
    .align-center {
        margin: 0 auto;
    }
    .align-right {
        float: right;
    }
</style>