@using mechanical.Models.PCE.Enum.PCEEvaluation

<script>
    $(document).ready(function () {
        const measurementUnits = @Html.Raw(Json.Serialize(((MeasurementUnit[])Enum.GetValues(typeof(MeasurementUnit))).ToDictionary(e => (int)e, e => Enum.GetName(typeof(MeasurementUnit), e))));
        const $container = $('#productionLineContainer');

        // Add production line
        function addProductionLine() {
            const template = $('#productionLineTemplate').html();
            let lineCount = $('#productionLineContainer .production-line-evaluation-item').length;
            const index = lineCount++;
            const html = template
                .replace(/__INDEX__/g, index)
                .replace(/__INDEX_1__/g, index + 1);
            
            const $newLine = $(html).hide();
            $container.append($newLine);
            
            // Initialize bottleneck toggle
            $newLine.find('.is-bottleneck').on('change', function() {
                if ($(this).is(':checked')) {
                    // Uncheck all other bottlenecks
                    $('.is-bottleneck').not(this).prop('checked', false);
                }
                handleBottleneckToggle();
            });
            
            // Initialize validation
            $.validator.unobtrusive.parse($newLine);

            $newLine.slideDown(300, function() {
                if (lineCount > 1) $(this).find('input:first').focus();
            });
            
            updateRemoveButtons();
            updateLineNumbers();
            handleBottleneckToggle();
        }

        function addInputMaterial($line) {
            const inputTemplate = $('#productionLineInputTemplate').html();
            const lineIndex = $('.production-line-form').index($line);
            const $inputsContainer = $line.find('.inputs-container');
            const inputIndex = $line.find('.input-item').length;
            
            const html = inputTemplate
                .replace(/__LINE_INDEX__/g, lineIndex)
                .replace(/__INPUT_INDEX__/g, inputIndex);

            const $newInput = $(html).hide();
            $inputsContainer.append($newInput);
            $newInput.slideDown(200);

            // Hide alert container if present
            $inputsContainer.find('.alert').hide();

            // Initialize validation
            $.validator.unobtrusive.parse($newInput);

            // Calculate totals when input changes
            $newInput.find('.input-quantity').on('input', calculateTotals);
            $newInput.find('.input-unit-dropdown').on('change', calculateTotals);
            @* $newInput.find('.input-unit-dropdown').on('change', updateUnitLabels); *@

            calculateTotals();
        }

        // Remove production line
        function removeProductionLine($line) {
            $line.slideUp(300, function() {
                $(this).remove();
                updateLineNumbers();
                updateRemoveButtons();
                handleBottleneckToggle();
            });
        }

        // Remove input material
        function removeInputMaterial($input) {
            const $container = $input.closest('.inputs-container');
            $input.slideUp(200, function() {
                $(this).remove();
                calculateTotals();

                // Show alert container if no inputs remain
                if ($container.children('.input-item').length === 0) {
                    $container.find('.alert').show();
                }
            });
            
            // Re-index remaining inputs
            $container.find('.input-item').each(function(index) {
                $(this).find('[name]').each(function() {
                    const name = $(this).attr('name')
                        .replace(/\[\d+\]/, `[${index}]`);
                    $(this).attr('name', name);
                });
            });
        }

        // Calculate total input and conversion ratio
        function calculateTotals() {
            let formIsValid = true;
            $('.production-line-form').each(function() {
                const $line = $(this);
                let totalInput = 0;
                let units = new Set();
                let hasError = false;

                $line.find('.input-quantity').each(function() {
                    const $input = $(this);
                    const val = parseFloat($input.val());
                    const unit = $input.closest('.input-item').find('.input-unit-dropdown').val();

                    if (unit) {
                        units.add(unit);
                    }

                    if (!isNaN(val)) {
                        totalInput += val;
                    }
                });

                if (units.size > 1) {
                    formIsValid = false;
                    hasError = true;
                    $line.find('.inputs-container').addClass('border border-danger');
                    $line.find('.unit-error-message').remove(); // Remove existing error message
                    $line.find('.inputs-container').after('<div class="text-danger unit-error-message">All inputs must have the same unit.</div>');
                } else {
                    $line.find('.inputs-container').removeClass('border border-danger');
                    $line.find('.unit-error-message').remove(); // Remove error message if resolved
                }

                // Disable submit button if invalid
                $('button[type="submit"]').prop('disabled', !formIsValid);
                
                const actualCapacity = parseFloat($line.find('.capacity-input').first().val()) || 0;
                const conversionRatio = actualCapacity > 0 && !hasError ? (actualCapacity / totalInput * 100) : 0;

                $line.find('.total-input').val(totalInput.toFixed(2));
                $line.find('.conversion-ratio').val(conversionRatio.toFixed(2));
            });
        }

        // Update line numbers
        function updateLineNumbers() {
            $('.production-line-form').each(function(index) {
                const $form = $(this);
                
                // Update data attributes
                $form.attr('data-index', index);
                const $lineNumber = $form.find('.line-number');
                $lineNumber.html(`
                    <i class="fas fa-industry me-2 text-primary"></i>
                    Production Line<span class="line-counter ms-1 d-inline">${index + 1}</span>
                `);
                
                // Update all field names and IDs
                $form.find('[name], [id]').each(function() {
                    const $field = $(this);
                    const name = $field.attr('name');
                    const id = $field.attr('id');
                    
                    if (name) {
                        $field.attr('name', name.replace(/\[\d+\]/, `[${index}]`));
                    }
                    
                    if (id) {
                        $field.attr('id', id.replace(/\d+/, index));
                    }
                    
                    // Update validation message targets
                    const $validationMsg = $field.next('.field-validation-valid');
                    if ($validationMsg.length) {
                        const validationMessageFor = $validationMsg.attr('data-valmsg-for').replace(/\[\d+\]/, `[${index}]`);
                        $validationMsg.attr('data-valmsg-for', validationMessageFor);
                    }
                });
            });
            
            lineCount = $('.production-line-form').length;
        }

        // Update remove buttons visibility
        function updateRemoveButtons() {
            const $lines = $('.production-line-form');
            $('.remove-line-btn').toggle($lines.length > 1);
        }

        // Handle bottleneck toggle
        function handleBottleneckToggle() {
            const $bottleneckCheckboxes = $('.is-bottleneck');
            const anyChecked = $bottleneckCheckboxes.is(':checked');
            $bottleneckCheckboxes.each(function () {
                const $checkbox = $(this);
                if (anyChecked) {
                    $checkbox.prop('disabled', !$checkbox.is(':checked'));
                } else {
                    $checkbox.prop('disabled', false);
                }
            });
        }

        function toggleOutputPhaseVisibility() {
            $('.production-line-form').each(function () {
                const $form = $(this);
                const productionLineType = document.getElementById('ProductionLineType').value;
                const $outputPhaseContainer = $form.find('.output-phase-container');
                const $outputPhaseSelect = $form.find('.output-phase');

                if (parseInt(productionLineType) === @((int)ProductionLineType.Interdependent)) {
                    $outputPhaseContainer.show();
                    $outputPhaseSelect.prop('required', true);
                } else {
                    $outputPhaseContainer.hide();
                    $outputPhaseSelect.prop('required', false).val('');
                }
            });
        }
        
        function reindexJustifications() {
            const $hiddenContainer = $('#justificationHiddenFields');
            $hiddenContainer.empty();
            let index = 0;

            $('#justificationContainer .form-check').each(function () {
                const $checkbox = $(this).find('.justification-checkbox');
                const isChecked = $checkbox.is(':checked');

                if (isChecked) {
                    const reason = $checkbox.data('reason');
                    const displayName = $checkbox.data('display');
                    const $textarea = $(this).find('.justification-text');
                    const justificationText = $textarea.length ? $textarea.val() : "";

                    // Add hidden fields for selected justification
                    $hiddenContainer.append(`
                        <input type="hidden" name="Justifications[${index}].Reason" value="${reason}" />
                        <input type="hidden" name="Justifications[${index}].JustificationText" value="${justificationText}" />
                    `);
                    index++;
                }
            });
        }

        const toggleInputsSection = function() {
            const justificationSection = document.getElementById('justificationSection');
            const inputsSection = document.querySelector('.inputs-section');
            const totalconversionContainer = document.querySelector('.total-input-conversion-ratio-container');
            const showInputs = hasInputOutputDataCheckbox.checked;

            if (justificationSection) justificationSection.style.display = showInputs ? 'none' : 'block';
            if (inputsSection) {
                inputsSection.style.display = showInputs ? 'block' : 'none';
                $('.inputs-container').each(function () {
                    $(this).closest('.inputs-section').toggle(showInputs);
                });
                totalconversionContainer.style.display = showInputs ? 'block' : 'none';
                $('.total-input-conversion-ratio-container').each(function () {
                    $(this).closest('.inputs-section').toggle(showInputs);
                });
            }

            if (showInputs) {
                // Uncheck all justification checkboxes and reset other justifications
                $('.justification-checkbox').prop('checked', false).trigger('change');
            } else {
                // Clear inputs container
                $('.inputs-container').empty();
            }
        };

        $('form').on('submit', function(e) {

            reindexJustifications();

            $('.is-bottleneck').each(function() {
                const $hidden = $(this).prev('input[type="hidden"]');
                if ($(this).is(':checked')) {
                    $hidden.remove();
                } else if (!$hidden.length) {
                    $(this).before('<input type="hidden" name="' + $(this).attr('name') + '" value="false" />');
                }
            });

            // Manually re-parse validation to include dynamic elements
            $(this).removeData('validator');
            $(this).removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse($(this));
            
            if (!$(this).valid()) {
                e.preventDefault();
                // Scroll to first error
                $('html, body').animate({
                    scrollTop: $('.field-validation-error').first().offset().top - 100
                }, 200);
            }
        });

        // Toggle input-output data sections
        const hasInputOutputDataCheckbox = document.getElementById('hasInputOutputData');
        if (hasInputOutputDataCheckbox) {
            // Attach event listener and trigger on load
            hasInputOutputDataCheckbox.addEventListener('change', toggleInputsSection);
            toggleInputsSection();
        }

        // Add new line button
        $('#addProductionLineBtn').click(function(e) {
            e.preventDefault();
            addProductionLine();
            toggleInputsSection();
            toggleOutputPhaseVisibility();
        });

        // Event delegation for dynamic elements
        $container.on('click', '.add-input-btn', function() {
            addInputMaterial($(this).closest('.production-line-form'));
        });
        
        $container.on('click', '.remove-line-btn', function() {
            removeProductionLine($(this).closest('.production-line-form'));
        });
        
        $container.on('click', '.remove-input', function() {
            removeInputMaterial($(this).closest('.input-item'));
        });
        
        // Calculate when capacity changes
        $container.on('input', '.capacity-input', calculateTotals);

        // Toggle justification section based on input/output data checkbox
        $('#hasInputOutputData').change(function() {
            const showJustification = !$(this).is(':checked');
            $('#justificationSection').toggle(showJustification);
            
            // If hiding, uncheck all justification boxes
            if (!showJustification) {
                $('.justification-checkbox').prop('checked', false).trigger('change');
                hasInputOutputDataCheckbox.addEventListener('change', toggleInputsSection);
                toggleInputsSection();
            }
        });

        // On page load
        $('.justification-checkbox').each(function() {
            const $checkbox = $(this);
            if($checkbox.is(':checked')) {
                $checkbox.trigger('change');
            }
        });

        // Update justification checkbox handling
        $(document).on('change', '.justification-checkbox', function() {
            const $container = $(this).closest('.form-check');
            const $textarea = $container.find('.justification-text');
            
            reindexJustifications();
            
            if ($container.data('reason') === '@JustificationReason.Others') {
                if (this.checked) {
                    $textarea.show().prop('disabled', false);
                } else {
                    $textarea.hide().prop('disabled', true).val('');
                }
            }
            
            // Re-parse validation
            const $form = $('form');
            $form.removeData('validator');
            $form.removeData('unobtrusiveValidation');
            $.validator.unobtrusive.parse($form);
        });

        // Initialize any pre-checked boxes
        $('.justification-checkbox:checked').trigger('change');
        
        // Consolidated event listener for ProductionLineType changes
        $(document).on('change', '#ProductionLineType', toggleOutputPhaseVisibility);
        
        // Attach event listener to bottleneck checkboxes
        $(document).on('change', '.is-bottleneck', function () {
            handleBottleneckToggle();
        });
        
        // Initialize the first line's inputs
        addProductionLine();
        
        // Initialize validation
        $.validator.unobtrusive.parse(document);

        // Initialize tooltips
        $('[title]').tooltip();

        // Update unit labels based on selected dropdown values
        function updateUnitLabels() {
            $('.production-line-form').each(function () {
                const $line = $(this);

                // Update input unit labels
                $line.find('.input-item').each(function () {
                    const $inputItem = $(this);
                    const selectedInputUnit = $inputItem.find('.input-unit-dropdown').val();
                    const displayInputUnitName = selectedInputUnit && measurementUnits[selectedInputUnit] && measurementUnits[selectedInputUnit] != "Other" ? measurementUnits[selectedInputUnit].toLowerCase() + "s" : 'units';
                    $inputItem.find('.input-unit-label').text(displayInputUnitName);
                });

                // Update production unit label
                const selectedTotalUnit = $line.find('.input-unit-dropdown').val();
                const displayUnitName = selectedTotalUnit && measurementUnits[selectedTotalUnit] && measurementUnits[selectedTotalUnit] != "Other" ? measurementUnits[selectedTotalUnit].toLowerCase() + "s" : 'units';
                $line.find('.total-input-unit-label').text(displayUnitName);

                const selectedProductionUnit = $line.find('.production-unit-dropdown').val();
                const displayName = selectedProductionUnit && measurementUnits[selectedProductionUnit] && measurementUnits[selectedProductionUnit] != "Other" ? measurementUnits[selectedProductionUnit].toLowerCase() + "s" : 'units';
                $line.find('.production-unit-label').text(displayName);
            });
        }

        // Attach event listeners to update unit labels on change
        $container.on('change', '.production-unit-dropdown', function () {
            updateUnitLabels();
        });

        // Attach event listeners to update unit labels on change
        $container.on('change', '.input-unit-dropdown', function () {
            updateUnitLabels();
            calculateTotals();
        });

        $container.on('input', '.input-quantity', function () {
            calculateTotals();
        });

        // Call updateUnitLabels on page load to initialize labels
        updateUnitLabels();
    });
</script>