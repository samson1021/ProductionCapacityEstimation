<script>
    
        function navigateToDetails(id) {
            const url = `/Description/ProductionDetails/${id}`;
            window.open(url, '_blank');
        }

    $(document).ready(function () {
        let cachedData = { DistinctCases: [], AllProductionCapacities: [] };
        let isDetailView = false;
        let currentReportType = 'summary'; // 'summary' or 'detail'

        let dataTable;
        function updateButtonText(isDetail) {
            let fromDate = $('#fromDate').val();
            let toDate = $('#toDate').val();
            let baseTitle = isDetail ? "Production Level Report" : "Case Level Report";
            let title = baseTitle;

            // Include date range only if either fromDate or toDate is not null/empty
            if (fromDate || toDate) {
                let dateRange = ` (${fromDate || 'Start'} to ${toDate || 'End'})`;
                title = baseTitle + dateRange;
            }

            $('#reportTitle').text(title);

            const text = isDetail ? 'Summary Report' : 'Detail Report';
            $('#detailReportBtn').text(text).prop('title', text); // Update title for accessibility
        }

        function loadDataTable(data, isDetail) {
            currentReportType = isDetail ? 'detail' : 'summary';

            updateButtonText(isDetail);

            // Destroy existing DataTable
            if ($.fn.DataTable.isDataTable('#MyNewCase')) {
                $('#MyNewCase').DataTable().clear().destroy();
                $('#MyNewCase thead').empty();
            }
         
            // Define columns with null checks
            const baseColumns = [
                {
                    data: 'Id',
                    title: 'Setting',  
                    width: '8%',
                    orderable: false,
                    className: 'no-export text-center',
                    render: function (data, type, row) {
                        const id = data.Id || row.Id || '';
                        return id ? `
                    <button onclick="navigateToDetails('${id}')"
                            class="nav-link-btn"
                            title="View detail report">
                        <i class="fas fa-external-link-alt"></i>
                    </button>
                    ` : 'xx';
                    }
                },
                {
                    data: 'CreatedAt',
                    title: 'Created At',
                    width: '10%',
                    render: function (data) {
                        if (!data) return '';
                        return new Date(data).toLocaleDateString('en-US', { month: '2-digit', day: '2-digit', year: 'numeric' });
                    }
                },
                { data: 'CaseNo', title: 'Case No', width: '7%', defaultContent: '' },
                { data: 'CurrentStatus', title: 'Status', width: '7%', defaultContent: '' },
                { data: 'ApplicantName', title: 'Applicant Name', width: '8%', defaultContent: '' },
                { data: 'RequestedOrgan', title: 'Requested Organ', width: '8%', defaultContent: '' },
                { data: 'CustomerApplicantRelationship', title: 'Customer Relationship', width: '8%', defaultContent: '' },
                { data: 'QuantityForSimilarMechanicalItem', title: 'Collateral Count', width: '7%', defaultContent: '' },
                { data: 'AssignedNo', title: 'Assigned', width: '6%', defaultContent: '' },
                { data: 'DeliveredNo', title: 'Delivered', width: '6%', defaultContent: '' },
                { data: 'ReturnedWithAdvice', title: 'Returned', width: '7%', defaultContent: '' },
                { data: 'OnHandNo', title: 'On Hand', width: '7%', defaultContent: '' },
                {
                    data: 'DeliveredPercentage',
                    title: 'Delivered',
                    width: '8%',
                    render: (data) => data ? data.toFixed(2) + '%' : '0%'
                },
            ];

            const detailColumns = [
                { data: 'RequestedEngineer', title: 'Requested Engineer', width: '8%', defaultContent: '' },
                {
                    data: 'DateCaseDeliveredToValuationOffice',
                    title: 'Delivered to Valuation',
                    width: '8%',
                    render: (data) => data ? new Date(data).toLocaleDateString('en-US') : '',
                    defaultContent: ''
                },
                {
                    data: 'DateCaseAssignedToTeamLeader',
                    title: 'Assigned to Team Leader',
                    width: '8%',
                    render: (data) => data ? new Date(data).toLocaleDateString('en-US') : '',
                    defaultContent: ''
                },
                {
                    data: 'DateCaseAssignedToValuators',
                    title: 'Assigned to Valuators',
                    width: '8%',
                    render: (data) => data ? new Date(data).toLocaleDateString('en-US') : '',
                    defaultContent: ''
                },
                { data: 'PurposeOfValuationRequest', title: 'Purpose of Valuation', width: '8%', defaultContent: '' },
                {
                    data: 'LastRecentValuationDate',
                    title: 'Last Valuation Date',
                    width: '8%',
                    render: (data) => data ? new Date(data).toLocaleDateString('en-US') : '',
                    defaultContent: ''
                },
                { data: 'DurationReceiptGrossDays', title: 'Receipt Gross Days', width: '8%', defaultContent: '' },
                { data: 'DistrictName', title: 'District', width: '8%', defaultContent: '' },
                { data: 'DurationAssignedGrossDays', title: 'Assigned Gross Days', width: '8%', defaultContent: '' },
                { data: 'DurationAssignedToTMGrossDays', title: 'Assigned to TM Days', width: '8%', defaultContent: '' },
                { data: 'NameOfValuator', title: 'Valuator', width: '8%', defaultContent: '' },
                { data: 'NetDaysConsumed', title: 'Net Days Consumed', width: '8%', defaultContent: '' },
                { data: 'SDTAccomplishment', title: 'SDT Accomplishment', width: '8%', defaultContent: '' },
                { data: 'FulfillmentOfDocumentation', title: 'Documentation', width: '8%', defaultContent: '' },
                {
                    data: 'ScheduledVisitDate',
                    title: 'Scheduled Visit',
                    width: '8%',
                    render: (data) => data ? new Date(data).toLocaleDateString('en-US') : '',
                    defaultContent: ''
                },
                { data: 'Location', title: 'Location', width: '8%', defaultContent: '' },
                { data: 'QuantityComplexityOfProperty', title: 'Property Complexity', width: '8%', defaultContent: '' },
                { data: 'LHCTitleDeedSerialNo', title: 'LHC Serial No', width: '8%', defaultContent: '' },
                { data: 'TypeOfProperty', title: 'Property Type', width: '8%', defaultContent: '' },
                { data: 'PropertyCategory', title: 'Property Category', width: '8%', defaultContent: '' },
                {
                    data: 'SiteInspectionDate',
                    title: 'Inspection Date',
                    width: '8%',
                    render: (data) => data ? new Date(data).toLocaleDateString('en-US') : '',
                    defaultContent: ''
                }
            ];

            // Combine columns
            const columns = isDetail ? [...baseColumns, ...detailColumns] : baseColumns;

            // Update <thead>
            const $thead = $('#MyNewCase thead');
            $thead.empty();
            const $tr = $('<tr></tr>');
            columns.forEach(col => {
                $tr.append(`<th>${col.title}</th>`);
            });
            $thead.append($tr);

            // Configure buttons
            const buttons = [
                { extend: 'copy', title: 'RM PCE Report' },
                { extend: 'csv', title: 'RM PCE Report' },
                { extend: 'excel', title: 'RM PCE Report' },
                { extend: 'pdf', title: 'RM PCE Report - pdf' },
                { extend: 'print', title: 'RM PCE Report - Print' },
                {
                    extend: 'colvis',
                    collectionLayout: 'fixed two-column',
                    text: 'Column Visibility'
                }
            ];



            // // Add row click handler
            // $('#MyNewCase tbody').on('click', 'tr', function () {
            //     const rowData = dataTable.row(this).data();
            //     if (rowData) {
            //         const id = currentReportType === 'detail'
            //             ? (rowData.ProductionId || rowData.ID || '')
            //             : (rowData.CaseId || rowData.ID || '');
            //             id="1234"
            //         if (id) {
            //             window.open(`/Description/ProductionDetails/${id}`, '_blank');
            //         }
            //     }
            // });

            // // Prevent the Setting column click from triggering row click
            // $('#MyNewCase tbody').on('click', 'td:first-child, td:first-child *', function (e) {
            //     e.stopPropagation();
            // });




            try {
                dataTable = $('#MyNewCase').DataTable({
                    data: data,
                    columns: columns,
                    order: [[0, 'desc']],
                    responsive: true,
                    lengthChange: false,
                    autoWidth: false,
                    scrollX: true,
                    dom: 'Bfrtip',
                    buttons: buttons,
                    drawCallback: function () {
                        dataTable.columns().every(function (index) {
                            const isVisible = this.visible();
                            const $button = $(`.dt-button-collection a[aria-controls="MyNewCase"][data-dt-idx="${index}"]`);
                            $button.css('color', isVisible ? '#800080' : '');
                        });
                    }
                });

                // Append buttons
                dataTable.buttons().container().appendTo('#MyNewCase_wrapper .col-md-6:eq(0)');
            } catch (error) {
                console.error('DataTable initialization error:', error)
            }

            // Update colvis styling
            dataTable.on('column-visibility.dt', function (e, settings, column, state) {
                const $button = $(`.dt-button-collection a[aria-controls="MyNewCase"][data-dt-idx="${column}"]`);
                $button.css('color', state ? '#800080' : '');
            });

            // Force button text update
            $('#detailReportBtn').text(isDetail ? 'Summary Report' : 'Detail Report');
            updateButtonText(isDetail);
        }

        function filterData(data, fromDate, toDate) {
            if (!fromDate && !toDate) return data;
            return data.filter(item => {
                if (!item.CreatedAt) return false;
                let createdAt = new Date(item.CreatedAt);
                let from = fromDate ? new Date(fromDate).setHours(0, 0, 0, 0) : null;
                let to = toDate ? new Date(toDate).setHours(23, 59, 59, 999) : null;
                return (!from || createdAt >= from) && (!to || createdAt <= to);
            });
        }

        function fetchData() {
            $.ajax({
                url: '/InternalReport/GetCaseReport',
                type: 'GET',
                dataType: 'json',
                success: function (data) {
                    console.log('Fetched data:', data); // Debug data
                    cachedData.DistinctCases = data.DistinctCases || [];
                    cachedData.AllProductionCapacities = data.AllProductionCapacities || [];
                    loadDataTable(cachedData.DistinctCases, false);
                    // $('#detailReportBtn').text(isDetail ? 'Summary Report' : 'Detail Report');
                    // isDetailView = false;
                },
                error: function (xhr, status, error) {
                    console.error('AJAX error:', status, error);
                }
            });
        }

        fetchData();

        $('#filterBtn').click(function () {
            let fromDate = $('#fromDate').val();
            let toDate = $('#toDate').val();
            if (fromDate && toDate && new Date(fromDate) > new Date(toDate)) {
                alert('From date cannot be greater than To date');
                return;
            }
            let data = isDetailView ? cachedData.AllProductionCapacities : cachedData.DistinctCases;
            let filteredData = filterData(data, fromDate, toDate);
            loadDataTable(filteredData, isDetailView);
        });

        $('#resetBtn').click(function () {
            $('#fromDate').val('');
            $('#toDate').val('');
            let data = isDetailView ? cachedData.AllProductionCapacities : cachedData.DistinctCases;
            loadDataTable(data, isDetailView);
        });

        $('#detailReportBtn').click(function () {
            isDetailView = !isDetailView;
            console.log('Toggling to isDetailView:', isDetailView); // Debug toggle
            let data = isDetailView ? cachedData.AllProductionCapacities : cachedData.DistinctCases;
            let fromDate = $('#fromDate').val();
            let toDate = $('#toDate').val();
            let filteredData = filterData(data, fromDate, toDate);

            // Update button text immediately
             updateButtonText(isDetailView);

            loadDataTable(filteredData, isDetailView);

            // Force button text update
            $('#detailReportBtn').text(isDetailView ? 'Summary Report' : 'Detail Report');
        });
    });
</script>